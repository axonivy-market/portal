pipeline {
  agent {label 'portal-slave'}
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }
  
  tools { 
      maven '3.9' 
      jdk '21' 
  }

  parameters {
      string(name: 'testPatternToRun', defaultValue: 'com.axonivy.portal.selenium.test.**.*Test,!*Express*Test', description: 'Test pattern to run')
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine-windows.zip', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine-windows.zip for nightly master
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine-windows.zip for dev master
        -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
        -Divy.engine.list.url=https://jenkins.ivyteam.io/job/core_product/job/release%252F9.4/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64 for last successful build 9.4
      ''')
      booleanParam(name: 'skipReplacePortal', defaultValue: false, description: 'Should skip replace Portal artifacts in the engine? TRUE: keep built-in Portal of the engine, FALSE: replace built-in Portal of the engine by the latest successful release.')
  }

  environment {
    releaseDir = 'archive'
    engineDir = "$env.WORKSPACE/engine"
  }
  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          def utils = load 'build/common/utils.groovy'
          utils.init()
          downloadPortalRelease()

          echo '====================Check out tag of Portal latest successful release===================='
          powershell '''
            $artifactPattern = $env:releaseDir + '/AxonIvyPortal/portal/target/*.iar' 
            $artifactName = dir $artifactPattern | select -expand BaseName
            $versionLastestReleasedPortal = $artifactName.substring(7)
            git fetch --tags
            git checkout tags/$versionLastestReleasedPortal
            git reset --hard HEAD
            git clean -fd
          '''

          echo '====================Copy patch to workspace if any. Note: this is in a tag and we cannot change code in git repo===================='
          powershell '''
            if (Test-Path ../patch/master) {
              copy -path ../patch/master -recurse -force -destination .
            }
          '''

          downloadPortalRelease()

          utils.extractEngine(env.engineDir, params.engineDownloadURL)

          if (!params.skipReplacePortal) {
            echo '====================Replace Portal in engine===================='
            powershell '''
              $DEPLOYMENT= $env:engineDir + "/system/demo-applications/demo-portal"
              rmdir $DEPLOYMENT/* -recurse
              Copy-Item $env:releaseDir/Showcase/portal-demo-app/target/*zip -Destination $DEPLOYMENT
              Copy-Item $env:releaseDir/Showcase/portal-developer-examples/target/*iar -Destination $DEPLOYMENT
              Copy-Item $env:releaseDir/Showcase/portal-components-examples/target/*iar -Destination $DEPLOYMENT
              Copy-Item $env:releaseDir/axonivy-express/target/*iar -Destination $DEPLOYMENT
            '''
          } else {
            powershell '''
              $DEPLOYMENT= $env:engineDir + "/system/demo-applications/demo-portal"
              Copy-Item $env:releaseDir/Showcase/portal-developer-examples/target/*iar -Destination $DEPLOYMENT
              Copy-Item $env:releaseDir/Showcase/portal-components-examples/target/*iar -Destination $DEPLOYMENT
              Copy-Item $env:releaseDir/axonivy-express/target/*iar -Destination $DEPLOYMENT
            '''
          }

          echo '====================Build PortalKitTestHelper and InternalSupport===================='
          def extraModules = ['AxonIvyPortal/PortalKitTestHelper', 'Showcase/InternalSupport']
          for (module in extraModules) {
            bat "mvn clean install -f ${module}/pom.xml -Divy.engine.directory=%engineDir% -Divy.compiler.engine.start.timeout=120"
          }

          utils.killUnnecessaryProcessesToRunTest()

          echo '====================Test Portal===================='
          bat "mvn clean test -f AxonIvyPortal/portal-selenium-test/customized_pom.xml -Dtest=${params.testPatternToRun} -DbrowserType=${props.browserType} -DtrimStackTrace=false -Divy.engine.directory=%engineDir% -Divy.deploy.timeout.seconds=60 -Divy.compiler.engine.start.timeout=120"
          utils.cleanDisk()
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'AxonIvyPortal/portal-selenium-test/target/selenide/reports/**/*.*, AxonIvyPortal/portal-selenium-test/target/testEngineOut.log', allowEmptyArchive: true
      junit allowEmptyResults: true, testResults: '**/surefire-reports/TEST-*.xml'
    }
  }
}

def downloadPortalRelease() {
  echo '====================Download Portal latest successful release===================='
  def branchName = env.BRANCH_NAME.replaceAll("/", "%%2F")
  withCredentials([usernameColonPassword(credentialsId: 'wawa-jenkins', variable: 'credentials')]) {
    bat "curl --user ${credentials} --output archive.zip ${env.JENKINS_URL}job/portal-release/job/${branchName}/lastSuccessfulBuild/artifact/*zip*/archive.zip"
    bat "curl --user ${credentials} --output archive-express.zip ${env.JENKINS_URL}job/axonivy-express-integration/job/develop/lastSuccessfulBuild/artifact/*zip*/archive.zip"
  }
  unzip zipFile: 'archive.zip', quiet: true
  unzip zipFile: 'archive-express.zip', quiet: true
}
