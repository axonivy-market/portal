pipeline {
  agent {label 'portal-slave'}
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }
  
  tools { 
      maven '3.1' 
      jdk '8' 
  }

  parameters {
      string(name: 'testPatternToRun', defaultValue: 'portal.guitest.userexample.test.*Test,portal.guitest.test.*Test', description: 'Test pattern to run.')
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-7/axonivy-engine-windows.zip', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-7/axonivy-engine-windows.zip for nightly 7.0
        -Divy.engine.list.url=https://jenkins.ivyteam.io/job/ivy-core-70_product/job/7.0/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64 for last successful build 7.0
        -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
      ''')
      booleanParam(name: 'skipReplacePortal', defaultValue: false, description: 'Should skip replace Portal artifacts in the engine? TRUE: keep built-in Portal of the engine, FALSE: replace built-in Portal of the engine by the latest successful release.')
  }

  environment {
    releaseDir = "$env.WORKSPACE/archive"
    engineDir = "$env.WORKSPACE/engine"
  }
  stages {
    stage('build') {
      steps {
        script {
          def utils = load 'build/common/utils.groovy'
          downloadPortalRelease()

          echo '====================Check out tag of Portal latest successful release===================='
          powershell '''
            $artifactPattern = $env:releaseDir + '/AxonIvyPortal/PortalKit/target/*.iar' 
            $artifactName = dir $artifactPattern | select -expand BaseName
            $versionLastestReleasedPortal = $artifactName.substring(10)
            git fetch --tags
            git checkout tags/$versionLastestReleasedPortal
            git reset --hard HEAD
            git clean -fd
          '''

          echo '====================Copy patch to workspace if any. Note: this is in a tag and we cannot change code in git repo===================='
          powershell '''
            if (Test-Path ../patch/7.0) {
              copy -path ../patch/7.0 -recurse -force -destination .
            }
          '''

          downloadPortalRelease()

          utils.extractEngine(env.engineDir, params.engineDownloadURL)

          if (!params.skipReplacePortal) {
            echo '====================Replace Portal in engine===================='
            def modules = ['AxonIvyPortal/PortalConnector', 'AxonIvyPortal/PortalStyle', 'AxonIvyPortal/PortalKit', 'AxonIvyPortal/PortalTemplate', 'AxonIvyPortal/AxonIvyExpress', 'AxonIvyPortal/SelfServiceBPM']
            for (module in modules) {
              def deployedApplication = module.contains('PortalConnector') ? 'System' : 'Portal'
              deployModuleToEngine(deployedApplication, module, env.releaseDir)
            }
          }

          echo '====================Deploy PortalKitTestHelper and InternalSupport===================='
          def extraModules = ['AxonIvyPortal/PortalKitTestHelper', 'Showcase/PortalExamples', 'Showcase/InternalSupport']
          for (module in extraModules) {
            bat "mvn clean install -f ${module}/pom.xml -Divy.engine.directory=%engineDir% -Divy.compiler.engine.start.timeout=120"
            deployModuleToEngine('Portal', module, env.WORKSPACE)
          }


          node('master') {
            utils.remoteDesktop()
          }

          utils.killUnnecessaryProcessesToRunTest()


          echo '====================Test Portal===================='
          bat """
            mvn clean test -f AxonIvyPortal/PortalTest/customized_pom.xml -Dtest=%testPatternToRun% -DbrowserType=${props.browserType} -DtrimStackTrace=false -Divy.engine.directory=%engineDir% -Divy.deploy.timeout.seconds=60 -Divy.compiler.engine.start.timeout=120 -DdemoUserName=demo -DdemoUserPassword=demo -DadminUserName=admin -DadminUserPassword=admin -DSelfServicePMName=SelfServiceBpm
          """

          node('master') {
            utils.closeAllRemoteDesktopConnections()
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: "AxonIvyPortal/PortalTest/target/*/*/*.jpg", allowEmptyArchive: true
      junit allowEmptyResults: true, testResults: '**/surefire-reports/TEST-*.xml'
    }
  }
}

def downloadPortalRelease() {
  echo '====================Download Portal latest successful release===================='
  def branchName = env.BRANCH_NAME.replaceAll("/", "%%2F")
  withCredentials([usernameColonPassword(credentialsId: 'jenkins-guest-cred', variable: 'jenkinsGuestCred')]) {
    bat "curl --user ${jenkinsGuestCred} --output archive.zip ${env.JENKINS_URL}job/PortalRelease/job/${branchName}/lastSuccessfulBuild/artifact/*zip*/archive.zip"
  }
  unzip zipFile: 'archive.zip', quiet: true
}

def deployModuleToEngine(deployedApplication, module, artifactParentDir) {
  def moduleName = module.split('/')[1]
  def deployedModuleDir = "engine/system/applications/${deployedApplication}/${moduleName}"
  powershell """
      if (!(Test-Path ${deployedModuleDir})) {
        mkdir ${deployedModuleDir}
      }
    cd "${deployedModuleDir}"
    rmdir * -recurse
    mkdir 1
    cd 1
    jar xf ${artifactParentDir}/${module}/target/*.iar
  """
}