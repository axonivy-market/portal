pipeline {
  agent { label 'linux' }

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }

  tools {
      maven '3.9'
      jdk '21'
  }

  parameters {
      string(name: 'releaseVersion', defaultValue: '1.0.0-m1', description: 'The release version.')
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-12.0/axonivy-engine-windows.zip', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-12/axonivy-engine-windows.zip for nightly 12
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine-windows.zip for dev master
        -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
        -Divy.engine.list.url=https://jenkins.ivyteam.io/job/core_product/job/release%252F9.4/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64 for last successful build 9.4
      ''')
      booleanParam(name: 'deployToRepo', defaultValue: false, description: 'Should deploy artifacts to repo? Note: only deploy to repo if no commit since the last build and pre-integration passed.')
  }

  environment {
    engineDir = "$env.WORKSPACE/engine"
  }

  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          echo "====================Update pom version to ${params.releaseVersion}===================="

          def POM_PATTERN_FILES = [
              'AxonIvyPortal/*/pom.xml',
              'Showcase/*/pom.xml',
              'AxonIvyPortal/portal-selenium-test/customized_pom.xml',
              'AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml',
              'Documentation/public-api/pom.xml'
          ]

          def DEPENDENCY_GROUP_IDS = [
              'ch.ivyteam.ivy.project.portal',
              'com.axonivy.portal'
          ]

          docker.build('build-portal-modules', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            // def pomFiles = []
            // POM_FILES.each { pattern ->
            //   def foundFiles = sh(script: "find ${pattern}", returnStdout: true).trim().split('\n')
            //   pomFiles.addAll(foundFiles)
            // }
            // pomFiles.each { pomFile ->
            //   if (fileExists(pomFile)) {
            //         def xmlContent = readFile(pomFile)
            //         def xml = new XmlParser().parseText(xmlContent)

            //         xml.dependencies.each { dep ->
            //       def groupId = dep.groupId.text()
            //       if (DEPENDENCY_GROUP_IDS.contains(groupId)) {
            //         echo "Updating version of ${groupId} dependency in ${pomFile}"
            //         dep.version[0].value = params.releaseVersion
            //       }
            //         }
            //         def updatedXml = new groovy.xml.XmlUtil().serialize(xml)
            //         writeFile(file: pomFile, text: updatedXml)
            //         echo "Updated dependencies in ${pomFile}"
            //     } else {
            //         echo "File not found: ${pomFile}"
            //   }
            // }

            //POM_FILES.each { pomFilePattern ->
                        // For each POM file pattern, find all the matching files
                        //def pomFiles = findFiles(glob: pomFilePattern)

            def pomFiles = []
            POM_PATTERN_FILES.each { pattern ->
              def foundFiles = sh(script: "find ${pattern}", returnStdout: true).trim().split('\n')
              pomFiles.addAll(foundFiles)
            }

            pomFiles.each { pomFile ->
              // Command to update dependency versions inside the Docker container
              for (groupId in DEPENDENCY_GROUP_IDS) {
                  echo "Updating version for dependencies with groupId: ${groupId} in ${pomFile}"
                  sh "sed -i 's|<groupId>\${groupId}</groupId>\\s*<version>.*</version>|<groupId>\${groupId}</groupId><version>${params.releaseVersion}</version>|g' ${pomFile}"
              }
              // sh """
              //                       # Iterate over each GROUP_ID and update its version in the POM
              //                       for GROUP_ID in ${DEPENDENCY_GROUP_IDS.join(' ')}; do
              //                           echo "Updating version for dependencies with groupId: \$GROUP_ID in ${pomFile}"
              //                           sed -i 's|<groupId>\${GROUP_ID}</groupId>\\s*<version>.*</version>|<groupId>\${GROUP_ID}</groupId><version>${params.releaseVersion}</version>|g' ${pomFile}
              //                       done
              //                   """
            }

            echo '====================Build all modules===================='
            // module structure [module path, isPossibleToDeploy]
            def modules = [['AxonIvyPortal/portal-components', true], ['AxonIvyPortal/portal', true], ['AxonIvyPortal/PortalKitTestHelper', false], ['Showcase/portal-user-examples', true], ['Showcase/portal-developer-examples', true], ['Showcase/InternalSupport', false], ['Showcase/portal-components-examples', true], ['AxonIvyPortal/portal-product', true], ['AxonIvyPortal/PortalApp', true], ['Showcase/portal-demo-app', true]]
            for (module in modules) {
              def mavenGoal = params.deployToRepo && module[1] ? 'deploy' : 'install'
              echo "TEST====================${mavenGoal}====================${module[0]}"
              //maven cmd: "mvn clean ${mavenGoal} -Divy.engine.directory=%engineDir% -Divy.engine.version=(7.0.0,] -Divy.compiler.engine.start.timeout=120 %engineDownloadURL% -f ${module[0]}/pom.xml"
            }

            echo "====================Create release tag ${params.releaseVersion}===================="

            // sh '''
            //   # Remove created tag
            //   git push --delete origin "${params.releaseVersion}"
            //   git tag -d "${params.releaseVersion}"

            //   # Create tag for the release
            //   git commit -a -m "update projects version"
            //   git tag -a "${params.releaseVersion}" -m "Tagged Portal release ${params.releaseVersion} by build job ${env.BUILD_URL}"
            //   git push origin "${params.releaseVersion}"
            // '''

            echo "====================Update Portal version for development after release ${params.releaseVersion} ===================="
            // def parts = releaseVersion.tokenize('.')
            // if (params.deployToRepo && parts.size() == 3 && parts[2].isNumber()) {
            //   def nextVersion = ''
            //   if ((parts[0] as int) % 2 == 0) {
            //     nextVersion = "${parts[0]}.${parts[1]}.${(parts[2] as int) + 1}-SNAPSHOT"
            //   } else {
            //     nextVersion = "${parts[0]}.${(parts[1] as int) + 1}.0-SNAPSHOT"
            //   }
            //   build job: "portal-update-pom/${java.net.URLEncoder.encode(env.BRANCH_NAME, 'UTF-8')}",
            //     parameters: [string(name: 'portalVersion', value: "${nextVersion}")],
            //     wait: true, propagate: false
            // }
            }
          }
        }
      }
    }

  post {
    always {
      archiveArtifacts artifacts: '**/target/*.iar,AxonIvyPortal/PortalApp/target/*.zip,Showcase/portal-demo-app/target/*.zip,*/*/pom.xml'
    }
  }
  }
