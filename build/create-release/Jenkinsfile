pipeline {
  agent {label 'portal-slave'}
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }
  
  tools { 
      maven '3.1' 
      jdk '8' 
  }

  parameters {
      string(name: 'releaseVersion', defaultValue: '1.0.0-m1', description: 'The release version.')
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-7/axonivy-engine-windows.zip', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-7/axonivy-engine-windows.zip for nightly 7.0
        -Divy.engine.list.url=https://jenkins.ivyteam.io/job/ivy-core-70_product/job/7.0/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64 for last successful build 7.0
        -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
      ''')
      booleanParam(name: 'deployToRepo', defaultValue: false, description: 'Should deploy artifacts to repo? Note: only deploy to repo if no commit since the last build and pre-integration passed.')
  }

  environment {
    engineDir = "$env.WORKSPACE/engine"
  }

  stages {
    stage('build') {
      steps {
        script {
          echo "====================Update pom version to ${params.releaseVersion}===================="
          powershell '''
            #find all pom file of portal project and change their versions and their portal dependencies to releaseVersion
            $utf8WithoutBom = New-Object System.Text.UTF8Encoding($false)
            $files = get-childitem AxonIvyPortal/*/pom.xml,Showcase/*/pom.xml,AxonIvyPortal/PortalTest/customized_pom.xml
            foreach($file in $files) {
              $xml = new-object xml
              $xml.load($file)
              $xml.project.version = $env:releaseVersion
              $dependencies = $xml.project.dependencies.ChildNodes
              foreach($dependency in $dependencies) {
                if(($dependency.groupId -eq 'ch.ivyteam.ivy.project.portal') -or ($dependency.groupId -eq 'com.axonivy.portal')) {
                  $dependency.version = $env:releaseVersion
                }
              }
              $sw = New-Object System.IO.StreamWriter($file, $false, $utf8WithoutBom)
              $xml.Save($sw)
            }
          '''

          echo "====================Build all modules===================="
          // module structure [module path, isPossibleToDeploy]
          def modules = [['AxonIvyPortal/PortalConnector', true], ['AxonIvyPortal/PortalStyle', true], ['AxonIvyPortal/PortalKit', true], ['AxonIvyPortal/PortalTemplate', true], ['AxonIvyPortal/AxonIvyExpress', true], ['AxonIvyPortal/SelfServiceBPM', true], ['AxonIvyPortal/PortalKitTestHelper', false], ['Showcase/PortalExamples', true], ['Showcase/InternalSupport', false]]
          for (module in modules) {
            def mavenGoal = params.deployToRepo && module[1]? 'deploy' : 'install'
            bat "mvn clean ${mavenGoal} -Divy.engine.directory=%engineDir% -Divy.engine.version=(7.0.0,] -Divy.compiler.engine.start.timeout=120 %engineDownloadURL% -f ${module[0]}/pom.xml"
          }

          echo "====================Build documentation===================="
          def docModules = [['Documentation\\PortalKitDocumentation', 'portalKitDoc'], ['Documentation\\PortalConnectorDocumentation', 'portalConnectorDoc']]
          def docTypes = ['html', 'pdf', 'eclipse']
          for (docModule in docModules) {
            def docModuleDir = docModule[0]
            def docModuleArtifactId = docModule[1]
            bat """
              mvn -f ${docModuleDir}\\pom.xml -DallowSnapshots=true -DparentVersion=(7.0.0,7.1.0-SNAPSHOT) versions:update-parent clean package
            """
            if (params.deployToRepo) {
              for (docType in docTypes) {
                bat """
                  for /r %%f in (${docModuleDir}\\target\\${docModuleArtifactId}-*-${docType}.zip) do (
                    mvn deploy:deploy-file -DgroupId=ch.ivyteam.ivy.project.portal -DartifactId=${docModuleArtifactId} -Dversion=${releaseVersion} -Dclassifier=${docType} -Dfile=%%f -Durl=https://repo.axonivy.io/artifactory/ext-release-local/ -DrepositoryId=repo.axonivy.io
                  )
                """
              }
            }
          }

          echo "====================Create release tag ${params.releaseVersion}===================="
          bat """
            rem remove created tag
            git push --delete origin ${params.releaseVersion}
            git tag -d ${params.releaseVersion}

            rem Create tag for the release
            git commit -a -m "update projects version"
            git tag -a ${params.releaseVersion} -m "Tagged Portal release ${params.releaseVersion} by build job ${env.BUILD_URL}
            git push origin ${params.releaseVersion}
          """
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: "**/target/*.iar,**/target/*.zip,*/*/pom.xml"
    }
  }
}
