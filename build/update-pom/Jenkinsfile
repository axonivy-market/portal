pipeline {
  agent {
    label 'linux'
  }
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }

  parameters {
    string(name: 'buildPluginVersion', defaultValue: '', description: 'Axon Ivy build plugin version of all pom will be updated to. If empty value, no changes. If buildPluginVersion, ivyEngineVersion, portalVersion, parentVersion params all are empty, this build just updates cached engines, no GIT commits are created.')
    string(name: 'parentVersion', defaultValue: '', description: 'Parent (ivy-project-parent) version of all pom will be updated to. If empty value, no changes. If buildPluginVersion, ivyEngineVersion, portalVersion, parentVersion params all are empty, this build just updates cached engines, no GIT commits are created.')
    string(name: 'ivyEngineVersion', defaultValue: '', description: 'Axon Ivy engine version of all pom will be updated to. If empty value, no changes.')
    string(name: 'portalVersion', defaultValue: '', description: 'Portal version of all pom will be updated to. If empty value, no changes.')
    string(name: 'branchToPush', defaultValue: 'portal-update-pom/master', description: 'Branch name to push changes. It must not be protected branches. After this build, create a pull request to merge to master')
    string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip', description: '''Where to download engine? e.g.
      -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip for nightly master
      -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine.zip for dev master
    ''')
  }

  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          if (!params.buildPluginVersion?.trim().isEmpty() || !params.ivyEngineVersion?.trim().isEmpty()
            || !params.portalVersion?.trim().isEmpty() || !params.parentVersion?.trim().isEmpty()) {
            docker.build('update-pom', '-f build/Dockerfile.python .').inside('-v /var/tools/maven-cache:/home/build/') {
              withEnv(['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']) {
                sshagent(credentials: ['github-axonivy']) {
                  sh """
                    git remote set-url origin git@github.com:axonivy-market/portal.git
                    git checkout ${BRANCH_NAME} || git checkout -b ${BRANCH_NAME}
                    git pull origin ${BRANCH_NAME}
                  """
                  echo '====================Update version===================='
                  updateVersion()

                  echo '====================Commit to GIT===================='
                  changeLog = sh(returnStdout: true, script: 'git status -s').trim()
                  if (changeLog) {
                    sh """
                      git commit -a -m "Updated all pom build.plugin.version=${params.buildPluginVersion}, ivy.engine.version=${params.ivyEngineVersion}, version=${params.portalVersion}, parentVersion=${params.parentVersion}"
                      git checkout -b ${params.branchToPush}
                      git push origin -u ${params.branchToPush}
                    """
                  } else {
                    echo 'Nothing to commit.'
                  }
                }
              }
            }
          }

          echo '====================Cache engine in local repository===================='
          
          docker.build('fetch-cache', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            ivyEngineVersion = sh(script: "mvn help:evaluate -Dexpression=ivy.engine.version -f AxonIvyPortal/portal-components/pom.xml -q -DforceStdout", returnStdout: true).trim()
            sh """
              if [ -d /home/build/.m2/repository/.cache/ivy/${ivyEngineVersion} ]; then rm -Rf /home/build/.m2/repository/.cache/ivy/${ivyEngineVersion}; fi
            """
            maven cmd: 'clean install -f AxonIvyPortal/portal-components/pom.xml'
          }
        }
      }
    }
  }
}

def updateVersion() {

  // Update buildPluginVersion for the portal-components project
  def portalComponent = 'AxonIvyPortal/portal-components/pom.xml'
  if (!params.buildPluginVersion?.trim().isEmpty()) {
    maven cmd: "-f ${portalComponent} versions:set-property versions:commit -Dproperty=build.plugin.version -DnewVersion=${params.buildPluginVersion}"
  }

  // Update ivyEngineVersion for all portal projects
  def pomFiles = ['AxonIvyPortal/portal-components/pom.xml', 'AxonIvyPortal/portal/pom.xml', 'AxonIvyPortal/portal-selenium-test/pom.xml', 'AxonIvyPortal/portal-selenium-test/customized_pom.xml', 'AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml', 'AxonIvyPortal/PortalKitTestHelper/pom.xml', 'Showcase/portal-user-examples/pom.xml', 'Showcase/portal-developer-examples/pom.xml', 'Showcase/InternalSupport/pom.xml', 'Showcase/portal-components-examples/pom.xml']
  for (pomFile in pomFiles) {
    if (!params.ivyEngineVersion?.trim().isEmpty()) {
      maven cmd: "-f ${pomFile} versions:set-property versions:commit -Dproperty=ivy.engine.version -DnewVersion=${params.ivyEngineVersion}"
    }
  }

  // Update portalVersion for all portal projects
  if (!params.portalVersion?.trim().isEmpty()) {
    sh '''#!/bin/bash
      updatePortalVersion() {
        python3 - <<EOF
import xml.etree.ElementTree as ET
from pathlib import Path
import sys
import re

def stripNamespace(element):
    # Iterate over all the elements and remove the namespace from the tag
    for elem in element.iter():
        # If the tag contains a namespace (indicated by '}')
        if '}' in elem.tag:
            elem.tag = elem.tag.split('}', 1)[1]  # Keep only the part after '}'
    return element

portalVersion = "$portalVersion"
filePath = "$1"

try:
  # Read original content to preserve formatting
  with open(filePath, 'r', encoding='utf-8') as f:
    content = f.read()
  
  # Parse XML to find what to update
  tree = ET.parse(filePath)
  root = tree.getroot()
  root = stripNamespace(root) # By default, tags like <project> are changed to tag <ns0:project>, need removing namespace
  
  # Update project version (first <version> tag)
  version = root.find("version")
  if version is not None:
    pattern = r'(<version>)[^<]+(</version>)'
    content = re.sub(pattern, r'\\g<1>' + portalVersion + r'\\g<2>', content, count=1)

  # Update Portal versions
  dependencies = root.find("dependencies")
  if dependencies is not None:
    for dependency in dependencies.findall("dependency"):
      groupId = dependency.find("groupId")
      if groupId is not None and groupId.text in [
        "com.axonivy.portal",
      ]:
        versionTag = dependency.find("version")
        if versionTag is not None:
          groupId_pattern = f'<groupId>{re.escape(groupId.text)}</groupId>'
          dependency_blocks = re.findall(r'<dependency>.*?</dependency>', content, re.DOTALL)
          for block in dependency_blocks:
            if groupId_pattern in block:
              old_block = block
              new_block = re.sub(r'(<version>)[^<]+(</version>)', r'\\g<1>' + portalVersion + r'\\g<2>', block)
              content = content.replace(old_block, new_block)
              break

  # Write back preserving original formatting
  with open(filePath, 'w', encoding='utf-8') as f:
    f.write(content)
except Exception as e:
  print(f"Failed to process {filePath}: {e}", file=sys.stderr)
EOF
      }

      filePatterns=("AxonIvyPortal/*/pom.xml" "Showcase/*/pom.xml" "AxonIvyPortal/portal-selenium-test/customized_pom.xml"
          "AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml" "Documentation/public-api/pom.xml")

      for pattern in "${filePatterns[@]}"; do
        for file in $pattern; do
          updatePortalVersion "$file"
        done
      done
    '''
  }

  // Update parentVersion for all project 
  if (!params.parentVersion?.trim().isEmpty()) {
    sh '''#!/bin/bash
      updatePortalParentVersion() {
        python3 - <<EOF
import xml.etree.ElementTree as ET
from pathlib import Path
import sys
import re

def stripNamespace(element):
    # Iterate over all the elements and remove the namespace from the tag
    for elem in element.iter():
        # If the tag contains a namespace (indicated by '}')
        if '}' in elem.tag:
            elem.tag = elem.tag.split('}', 1)[1]  # Keep only the part after '}'
    return element

parentVersion = "$parentVersion"
filePath = "$1"

try:
  # Read original content to preserve formatting
  with open(filePath, 'r', encoding='utf-8') as f:
    content = f.read()
  
  # Parse XML to find what to update
  tree = ET.parse(filePath)
  root = tree.getroot()
  root = stripNamespace(root) # By default, tags like <project> are changed to tag <ns0:project>, need removing namespace
  
  # Update project version (first <version> tag)
  version = root.find("version")
  if version is not None:
    pattern = r'(<version>)[^<]+(</version>)'
    content = re.sub(pattern, r'\\g<1>' + parentVersion + r'\\g<2>', content, count=1)

  # Update parent version
  parent = root.find("parent")
  if parent is not None:
    groupId = parent.find("groupId")
    artifactId = parent.find("artifactId")
    versionTag = parent.find("version")
    if (groupId is not None and artifactId is not None and versionTag is not None and
        groupId.text == "com.axonivy.ivy.api" and artifactId.text == "ivy-project-parent"):
      # Find the parent block and update its version
      parent_block_pattern = r'<parent>.*?</parent>'
      parent_blocks = re.findall(parent_block_pattern, content, re.DOTALL)
      for block in parent_blocks:
        if 'com.axonivy.ivy.api' in block and 'ivy-project-parent' in block:
          old_block = block
          new_block = re.sub(r'(<version>)[^<]+(</version>)', r'\\g<1>' + parentVersion + r'\\g<2>', block)
          content = content.replace(old_block, new_block)
          break

  # Write back preserving original formatting
  with open(filePath, 'w', encoding='utf-8') as f:
    f.write(content)
except Exception as e:
  print(f"Failed to process {filePath}: {e}", file=sys.stderr)
EOF
      }

      filePatterns=("AxonIvyPortal/*/pom.xml" "Showcase/*/pom.xml" "AxonIvyPortal/portal-selenium-test/customized_pom.xml"
          "AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml" "Documentation/public-api/pom.xml")

      for pattern in "${filePatterns[@]}"; do
        for file in $pattern; do
          updatePortalParentVersion "$file"
        done
      done
    '''
  }
}
