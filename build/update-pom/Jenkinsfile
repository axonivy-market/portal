pipeline {
  agent {
    label 'linux'
  }
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }

  parameters {
    string(name: 'buildPluginVersion', defaultValue: '13.1.0-SNAPSHOT', description: 'Axon Ivy build plugin version of all pom will be updated to.')
    string(name: 'ivyEngineVersion', defaultValue: '13.1.0', description: 'Axon Ivy engine version of all pom will be updated to.')
    string(name: 'portalVersion', defaultValue: '13.1.0', description: 'Portal version of all pom will be updated to.')
    string(name: 'branchToPush', defaultValue: 'portal-update-pom/master', description: 'Branch name to push changes. It must not be protected branches. After this build, create a pull request to merge to master')
    string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip', description: '''Where to download engine? e.g.
      -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip for nightly master
      -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine.zip for dev master
    ''')
  }

  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          docker.build('update-pom', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            withEnv(['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']) {
              sshagent(credentials: ['github-axonivy']) {
                sh """
                  git remote set-url origin git@github.com:axonivy-market/portal.git
                  git checkout ${BRANCH_NAME} || git checkout -b ${BRANCH_NAME}
                  git pull origin ${BRANCH_NAME}
                """
                echo '====================Update version===================='
                updateVersion()

                // echo '====================Commit to GIT===================='
                // changeLog = sh(returnStdout: true, script: 'git status -s').trim()
                // if (changeLog) {
                //   sh """
                //     git commit -a -m "Updated all pom build.plugin.version=${params.buildPluginVersion}, ivy.engine.version=${params.ivyEngineVersion}"
                //     git checkout -b ${params.branchToPush}
                //     git push origin -u ${params.branchToPush}
                //   """
                // } else {
                //   echo 'Nothing to commit.'
                // }
              }
            }
          }

          // echo '====================Cache engine in local repository===================='
          // removeCacheEngine()
          // docker.build('fetch-cache', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
          //   maven cmd: 'clean install -f AxonIvyPortal/portal-components/pom.xml'
          // }
        }
      }
    }
  }
}

def updateVersion() {
  def pomFiles = ['AxonIvyPortal/portal-components/pom.xml', 'AxonIvyPortal/portal/pom.xml', 'AxonIvyPortal/portal-migration/pom.xml',
    'AxonIvyPortal/portal-selenium-test/pom.xml', 'AxonIvyPortal/portal-selenium-test/customized_pom.xml', 'AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml',
    'AxonIvyPortal/PortalKitTestHelper/pom.xml', 'Showcase/portal-user-examples/pom.xml',
    'Showcase/portal-developer-examples/pom.xml', 'Showcase/InternalSupport/pom.xml', 'Showcase/portal-components-examples/pom.xml']
  for (pomFile in pomFiles) {
    maven cmd: "-f ${pomFile} versions:set-property versions:commit -Dproperty=ivy.engine.version -DnewVersion=${params.ivyEngineVersion}"
    maven cmd: "-f ${pomFile} versions:set-property versions:commit -Dproperty=build.plugin.version -DnewVersion=${params.buildPluginVersion}"
  }

  powershell '''
    #find all pom file of portal project and change their versions and their portal dependencies to releaseVersion
    $utf8WithoutBom = New-Object System.Text.UTF8Encoding($false)
    $files = get-childitem AxonIvyPortal/*/pom.xml,Showcase/*/pom.xml,AxonIvyPortal/portal-selenium-test/customized_pom.xml,AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml,Documentation/public-api/pom.xml
    foreach($file in $files) {
      $xml = new-object xml
      $xml.load($file)
      $xml.project.version = $env:portalVersion
      $dependencies = $xml.project.dependencies.ChildNodes
      foreach($dependency in $dependencies) {
        if(($dependency.groupId -eq 'ch.ivyteam.ivy.project.portal') -or ($dependency.groupId -eq 'com.axonivy.portal')) {
          $dependency.version = $env:portalVersion
        }
      }
      $sw = New-Object System.IO.StreamWriter($file, $false, $utf8WithoutBom)
      $xml.Save($sw)
    }
  '''
}

def removeCacheEngine() {
  sh """
    cd /var/tools/maven-cache/.m2/repository/.cache/ivy
    if [ -d ${params.ivyEngineVersion} ]; then rm -Rf ${params.ivyEngineVersion}; fi
  """
}