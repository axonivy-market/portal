pipeline {
  agent {label 'linux'}
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }

  parameters {
      string(name: 'buildPluginVersion', defaultValue: '8.0.7', description: 'Axon Ivy build plugin version of all pom will be updated to.')
      string(name: 'ivyEngineVersion', defaultValue: '8.0.33', description: 'Axon Ivy engine version of all pom will be updated to.')
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-8/axonivy-engine-windows.zip', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly-8/axonivy-engine-windows.zip for nightly 8.0
        -Divy.engine.list.url=https://jenkins.ivyteam.io/job/ivy-core_product/job/release%252F8.0/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64 for last successful build 8.0
        -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
      ''')
  }

  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          docker.build('update-pom', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            sshagent(credentials: ['github-axonivy']) {
                sh """
                  git remote set-url origin git@github.com:axonivy-market/portal.git
                  git checkout ${BRANCH_NAME} || git checkout -b ${BRANCH_NAME}
                  git pull origin ${BRANCH_NAME}
                """
                echo '====================Update version===================='
                updateVersion()

                echo '====================Commit to GIT===================='
                def changeLog = sh(returnStdout: true, script: 'git status -s').trim()
                if (changeLog) {
                  sh """
                    git commit -a -m "Updated all pom build.plugin.version=${params.buildPluginVersion}, ivy.engine.version=${params.ivyEngineVersion}"
                    git push origin -u ${BRANCH_NAME}
                  """
                } else {
                  echo 'Nothing to commit.'
                }
              }
          }

          echo '====================Cache engine in local repository===================='
          removeCacheEngine()
          docker.build('fetch-cache', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            maven cmd: 'clean install -f AxonIvyPortal/PortalStyle/pom.xml'
          }
        }
      }
    }
  }
}

def updateVersion() {
    def pomFiles = [
    'AxonIvyPortal/AxonIvyExpress/pom.xml', 
    'AxonIvyPortal/PortalApp/pom.xml', 
    'AxonIvyPortal/PortalKit/pom.xml', 
    'AxonIvyPortal/PortalKitTestHelper/pom.xml', 
    'AxonIvyPortal/PortalStyle/pom.xml', 
    'AxonIvyPortal/PortalTemplate/pom.xml', 
    'AxonIvyPortal/PortalTest/customized_pom.xml', 
    'AxonIvyPortal/PortalTest/guitest_pom.xml',
    'AxonIvyPortal/PortalTest/pom.xml', 
    'AxonIvyPortal/portal-components/pom.xml', 
    'Showcase/PortalExamples/pom.xml', 
    'Showcase/InternalSupport/pom.xml', 
    'Showcase/portal-components-examples/pom.xml']
  for (pomFile in pomFiles) {
    maven cmd: "-f ${pomFile} versions:set-property versions:commit -Dproperty=ivy.engine.version -DnewVersion=${params.ivyEngineVersion}"
    maven cmd: "-f ${pomFile} versions:set-property versions:commit -Dproperty=build.plugin.version -DnewVersion=${params.buildPluginVersion}"
  }
}

def removeCacheEngine() {
  sh """
    cd /var/tools/maven-cache/.m2/repository/.cache/ivy
    if [ -d ${params.ivyEngineVersion} ]; then rm -Rf ${params.ivyEngineVersion}; fi
  """
}