pipeline {
  agent {label 'linux'}
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron('0 13 * * *')
  }

  // tools { 
  //     maven '3.8' 
  //     jdk '17' 
  // }

  environment {
    engineVersion = 'trunk'
    engineDir = "C:/tools/ivy-server/${env.engineVersion}"
    portalApplicationName = 'Portal'
  }

  stages {
    stage('deploy') {
      steps {
        script {
          utils = load 'build/common/utils.groovy'
          // utils.stopAllEngines()
          engineServiceName = 'Axon.ivyEngineTrunk'
          // utils.startWindowsService(engineServiceName)

          // docker.build('build-portal-modules', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
          //   def modules = ['AxonIvyPortal/portal-components']
          //   for (module in modules) {
          //     maven cmd: "clean install -f ${module}/pom.xml"
          //   }
          // }

//////////////ok
          // docker.build('build-portal-modules', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
          // def modules = ['AxonIvyPortal/portal-components', 'AxonIvyPortal/portal', 'AxonIvyPortal/AxonIvyExpress']
          // def buildPluginVersion = readMavenPom(file: 'AxonIvyPortal/portal-components/pom.xml').getProperties().getProperty("build.plugin.version")
          // def engineUrl = 'http://10.123.1.216:8000'
          //   for (module in modules) {
          //     maven cmd: "clean install -f ${module}/pom.xml"
          //     maven cmd: "com.axonivy.ivy.ci:project-build-plugin:${buildPluginVersion}:deploy-to-engine -f ${module}/pom.xml -Divy.deploy.server.id=engine-cockpit -Divy.deploy.engine.app=Portal -Divy.deploy.method=HTTP -Divy.deploy.engine.url=${engineUrl} -Divy.test.engine=MODIFY_EXISTING -Divy.deploy.test.users=true"
          //   }
          // }
/////////////end

          // def buildPluginVersion = readMavenPom(file: 'AxonIvyPortal/portal-components/pom.xml').getProperties().getProperty("build.plugin.version")
          // def modules = ['AxonIvyPortal/portal-components', 'AxonIvyPortal/portal', 'AxonIvyPortal/AxonIvyExpress']
          // for (module in modules) {
          //   bat "mvn clean install -f ${module}/pom.xml"
          //   bat "mvn com.axonivy.ivy.ci:project-build-plugin:${buildPluginVersion}:deploy-to-engine -f ${module}/pom.xml -Divy.deploy.engine.app=%portalApplicationName% -Divy.deploy.engine.dir=%engineDir% -Divy.test.engine=MODIFY_EXISTING -Divy.deploy.timeout.seconds=60"
          // }
        }
      }
    }
    stage('test') {
      // agent {label 'linux'}

      // tools {
      //   jdk '8' 
      // }
      steps {
        script {
          today = new Date().format('dd-MM-yyyy_HH-mm')
          fileOperations([folderCreateOperation(folderPath: "D:/PerformanceResult/${today}/${env.engineVersion}")])

          docker.build('jmeter-performance-test', '-f build/performance-test/Dockerfile .').inside('''-v /var/tools/maven-cache:/home/build/ 
              -v /var/tools/jenkins-linux/workspace/of-Master-Branch-to-new-Server_3/AxonIvyPortal/PortalTest/jmeter:/opt/apache-jmeter-5.5/bin/portal-jmeter''') {
            for (module in builtModules) {
              sh 'bin/jmeter -n -t bin/portal-jmeter/portal_walkthrough_testplan.jmx -l bin/portal-jmeter/result.csv'
            }
          }


          echo "====================Test one admin user===================="
          updateConfigFile('data/single_admin_user_server.csv', '1')
          bat '''
            jmeter.bat -n -t AxonIvyPortal/PortalTest/jmeter/portal_walkthrough_testplan.jmx -l temp.jtl
          '''
          executeJMeter('result_1_admin_user.jtl')

          echo "====================Test for one normal user===================="
          updateConfigFile('data/single_normal_user_server.csv', '1')
          executeJMeter('result_1_normal_user.jtl')

          echo "====================Test ten users===================="
          updateConfigFile('data/users_server.csv', '10')
          executeJMeter('result_10_users.jtl')
        }
      }
    }
  }

  post {
    always {
      script {
        if (binding.hasVariable('utils')) {
          // utils.stopWindowsService(engineServiceName)
        }
      }
      // node('linux') {
        script {
          if (binding.hasVariable('today')) {
            archiveArtifacts artifacts: "D:/PerformanceResult/${today}/*/*.jtl", allowEmptyArchive: true
            perfReport sourceDataFiles: "D:/PerformanceResult/${today}/*/*.jtl", compareBuildPrevious :true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, errorFailedThreshold: 1
          }
        }
      // }
    }
  }
}

def updateConfigFile(acccountFilePath, numberOfUser) {
  powershell """
    get-content AxonIvyPortal/PortalTest/jmeter/test.properties | select-string -pattern 'portal.thread.numberOfUser' -notmatch | select-string -pattern 'file.csv' -notmatch | Out-File AxonIvyPortal/PortalTest/jmeter/out.properties -encoding ASCII
    Add-Content AxonIvyPortal/PortalTest/jmeter/out.properties "file.csv=${acccountFilePath}"
    Add-Content AxonIvyPortal/PortalTest/jmeter/out.properties "portal.thread.numberOfUser=${numberOfUser}"
    move AxonIvyPortal/PortalTest/jmeter/out.properties AxonIvyPortal/PortalTest/jmeter/test.properties -Force
  """
}

def executeJMeter(resultFileName) {
  bat """
    jmeter.bat -n -t AxonIvyPortal/PortalTest/jmeter/portal_walkthrough_testplan.jmx -l D:/PerformanceResult/${today}/${env.engineVersion}/${resultFileName}
  """
}