pipeline {
  agent { label 'linux' }

  options {
    buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron('0 13 * * *')
  }

  environment {
    engineVersion = 'master'
    jmeterSourceDir = 'AxonIvyPortal/PortalTest/jmeter'
    ivyDir = '/var/tools/ivy'
  }

  stages {
    stage('deploy') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          engineNames = ['master', '10', '8', 'performance-master', 'performance-10', 'performance-8']
          for (engineName in engineNames) {
            sh "docker compose -f ${ivyDir}/${engineName}/docker-compose.yml down"
          }
          sh """
            docker compose -f ${ivyDir}/${engineNames[3]}/docker-compose.yml up -d
            #Workaround because PMV Portal starts slow
            sleep 100
          """

          docker.build('build-portal-modules', '-f build/Dockerfile .').inside('-v /var/tools/maven-cache:/home/build/') {
            def modules = ['AxonIvyPortal/portal-components', 'AxonIvyPortal/portal']
            def buildPluginVersion = readMavenPom(file: 'AxonIvyPortal/portal-components/pom.xml').getProperties().getProperty('build.plugin.version')
            def utils = load 'build/common/utils.groovy'
            def engineUrl = 'http://' + utils.getJenkinsMasterDomain() + ':9000'
            for (module in modules) {
              maven cmd: "clean install -f ${module}/pom.xml"
              maven cmd: "com.axonivy.ivy.ci:project-build-plugin:${buildPluginVersion}:deploy-to-engine -f ${module}/pom.xml -Divy.deploy.server.id=engine-cockpit -Divy.deploy.engine.app=Portal -Divy.deploy.method=HTTP -Divy.deploy.engine.url=${engineUrl} -Divy.test.engine=MODIFY_EXISTING"
            }
          }
        }
      }
    }
    stage('test') {
      steps {
        script {
          today = new Date().format('dd-MM-yyyy_HH-mm')
          resultDir = "/var/tools/performance-result/${env.engineVersion}/${today}"
          fileOperations([folderCreateOperation(folderPath: "${resultDir}")])

          echo '====================Test one admin user===================='
          updateConfigFile('data/single_admin_user_server.csv', '1')
          // First executing takes more time, so not record the result of first time
          executeJMeter('../tmp.jtl')

          executeJMeter('result_1_admin_user.jtl')

          echo '====================Test for one normal user===================='
          updateConfigFile('data/single_normal_user_server.csv', '1')
          executeJMeter('result_1_normal_user.jtl')

          echo '====================Test ten users===================='
          updateConfigFile('data/users_server.csv', '10')
          executeJMeter('result_10_users.jtl')
        }
      }
    }
  }

  post {
    always {
      script {
        for (engineName in engineNames) {
          sh "docker compose -f ${ivyDir}/${engineName}/docker-compose.yml down"
        }
        sh """
          docker compose -f ${ivyDir}/${engineNames[0]}/docker-compose.yml up -d
          docker compose -f ${ivyDir}/${engineNames[1]}/docker-compose.yml up -d
        """
      }
      script {
        if (binding.hasVariable('today')) {
          perfReport sourceDataFiles: "${resultDir}/*.jtl", compareBuildPrevious :true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, errorFailedThreshold: 1
        }
      }
    }
  }
}

def updateConfigFile(acccountFilePath, numberOfUser) {
  sh """
    awk -F'=' -v OFS='=' -v newval='${acccountFilePath}' '/^file.csv/{\$2=newval;print;next}1' ${jmeterSourceDir}/test.properties > ${jmeterSourceDir}/tmp.properties
    awk -F'=' -v OFS='=' -v newval='${numberOfUser}' '/^portal.thread.numberOfUser/{\$2=newval;print;next}1' ${jmeterSourceDir}/tmp.properties > ${jmeterSourceDir}/test.properties
  """
}

def executeJMeter(resultFileName) {
  def binDir = '/opt/apache-jmeter-5.5/bin'
  docker.build('jmeter-performance-test', '-f build/performance-test/Dockerfile .').inside("""
        -v ${WORKSPACE}/${jmeterSourceDir}:${binDir}/portal-jmeter
        -v ${resultDir}:${binDir}/result
      """) {
    sh "${binDir}/jmeter -Jjmeter.save.saveservice.subresults=false -n -t ${binDir}/portal-jmeter/portal_walkthrough_testplan.jmx -l ${binDir}/result/${resultFileName}"
  }
}
