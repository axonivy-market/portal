pipeline {
  agent { label 'linux' }

  options {
    buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '5'))
  }

  // triggers removed

  environment {
    engineVersion = 'master'
    jmeterDslSourceDir = '/var/tools/ivy/performance-master/jmeter-javadsl-test'
    ivyDir = '/var/tools/ivy'
    resultDir = '/var/tools/jmeter-javadsl-performance-result/${env.engineVersion}/'

  }

  stages {
    stage('deploy') {
      steps {
        script {
          engineNames = ['master', '12', '10', '8', 'performance-master', 'performance-12', 'performance-10', 'performance-8']
          currentBuild.description = "On ${env.NODE_NAME}"
          for (engineName in engineNames) {
            sh "docker compose -f ${ivyDir}/${engineName}/docker-compose.yml down"
          }
          sh """
            docker compose -f ${ivyDir}/${engineNames[4]}/docker-compose.yml up -d
            sleep 100
          """
        }
      }
    }
    stage('Run JMeter-JavaDSL Tests') {
      steps {
        script {
          dir("${jmeterDslSourceDir}") {
            sh 'mvn clean test'
          }
        }
      }
    }
  }

  post {
    always {
      script {
        for (engineName in engineNames) {
          sh "docker compose -f ${ivyDir}/${engineName}/docker-compose.yml down"
        }
        sh """
          docker compose -f ${ivyDir}/${engineNames[0]}/docker-compose.yml up -d
          docker compose -f ${ivyDir}/${engineNames[1]}/docker-compose.yml up -d
          
          cp -r ${jmeterDslSourceDir}/target/jtls/* ${resultDir}
        """
        perfReport sourceDataFiles: "${jmeterDslSourceDir}/target/jtls/**/*.jtl", compareBuildPrevious: true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, errorFailedThreshold: 1
      }
    }
  }
}
