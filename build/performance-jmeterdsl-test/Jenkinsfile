pipeline {
  agent { label 'linux' }

  options {
    buildDiscarder(logRotator(numToKeepStr: '200', artifactNumToKeepStr: '5'))
  }

  // cron job triggers removed

  environment {
    // Jmeter DSL source directory is in Portal source -> prefer to Performance test
    jmeterDslSourceDir = 'AxonIvyPortal/portal-performance-test'
    ivyDir = '/var/tools/ivy'
    //could be master/12/10
    resultDir = '/var/tools/jmeter-javadsl-performance-result/master'
  }

  stages {
    stage('Setup Credentials') {
      steps {
        script {
          withCredentials([
              file(credentialsId: 'users_server', variable: 'USERS_SERVER_CSV'),
              file(credentialsId: 'single_admin_user_server', variable: 'ADMIN_USER_CSV'),
              file(credentialsId: 'single_normal_user_server', variable: 'NORMAL_USER_CSV'),
          ]) {
            sh '''
              # Ensure target directory exists
              mkdir -p ${jmeterDslSourceDir}/jmeter/data
              
              # Copy files into the running container using single quotes to avoid interpolation
              cp "${USERS_SERVER_CSV}" "${jmeterDslSourceDir}/jmeter/data/users_server.csv"
              cp "${ADMIN_USER_CSV}" "${jmeterDslSourceDir}/jmeter/data/single_admin_user_server.csv"
              cp "${NORMAL_USER_CSV}" "${jmeterDslSourceDir}/jmeter/data/single_normal_user_server.csv"
              
              # Verify files were copied
              echo "Files copied to ${jmeterDslSourceDir}/jmeter/data/"
              ls -la "${jmeterDslSourceDir}/jmeter/data/"
            '''
          }
        }
      }
    }
    stage('Run JMeter-JavaDSL Tests') {
      steps {
        script {
          dir("${jmeterDslSourceDir}") {
            sh 'mvn clean test'
          }
        }
      }
    }
  }

  post {
    always {
      script {
        sh """
          cp -r ${jmeterDslSourceDir}/target/jtls/* ${resultDir}
        """
        perfReport sourceDataFiles: "${jmeterDslSourceDir}/target/jtls/**/*.jtl", compareBuildPrevious: true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, errorFailedThreshold: 1
      }
    }
  }
}
