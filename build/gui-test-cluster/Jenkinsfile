pipeline {
  agent {label 'portal-slave'}
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '30'))
  }

  tools { 
      maven '3.6' 
      jdk '11' 
  }

  parameters {
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.list.url=https://jenkins.ivyteam.io/job/ivy-core_product/job/release%%252F9.3/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine-windows.zip for nightly master
        -Divy.engine.download.url=-Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine-windows.zip for dev master
        -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
      ''')
  }

  environment {
    configBackupDir = "c:\\backup\\engine-config"
  }

  stages {
    stage('build') {
      steps {
        script {
          configs = [node1: [engineDir: "$env.WORKSPACE\\AxonIvyPortal\\PortalTest\\engine1", engineService: "Axon.ivy-master-cluster-gui-test-1", configDir: "master-cluster-node1"], 
            node2: [engineDir: "$env.WORKSPACE\\AxonIvyPortal\\PortalTest\\engine2", engineService: "Axon.ivy-master-cluster-gui-test-2", configDir: "master-cluster-node2"]]
          masterNode = configs['node1']
          masterNodeDir = masterNode['engineDir']
          elasticSearchDataDir = 'C:\\tools\\external-elastic-search\\elasticsearch-master-cluster\\data'
          def utils = load 'build\\common\\utils.groovy'
          utils.stopAllEngines()
          
          configs.each{k, v ->
            utils.extractEngine(v['engineDir'], params.engineDownloadURL)
          }
          echo "====================Build Portal modules===================="
          def modules = ['AxonIvyPortal/PortalStyle', 'AxonIvyPortal/PortalKit', 'AxonIvyPortal/PortalTemplate', 'AxonIvyPortal/AxonIvyExpress', 'AxonIvyPortal/PortalKitTestHelper', 'Showcase/portal-user-examples', 'Showcase/portal-developer-examples', 'Showcase/InternalSupport', 'AxonIvyPortal/PortalApp', 'Showcase/portal-demo-app']
          for (module in modules) {
            bat "mvn clean install -f ${module}/pom.xml -Divy.engine.directory=${masterNodeDir}"
          }

          println powershell(returnStdout: true, script: """
            dropdb --host=10.123.1.30 --username=postgres --no-password ivy-master-cluster-gui-test
            rmdir ${elasticSearchDataDir}\\* -recurse
            exit 0
          """)

          configs.each{key, config ->
            println powershell(returnStdout: true, script: """
              Copy-Item ${configBackupDir}\\${config['configDir']}\\* ${config['engineDir']} -Recurse -Force
              exit 0
            """)
          }

          bat """
            ${masterNodeDir}\\bin\\EngineConfigCli.exe create-db
            ${masterNodeDir}\\bin\\EngineConfigCli.exe config-cluster 10.123.1.193 8021
            ${configs['node2']['engineDir']}\\bin\\EngineConfigCli.exe config-cluster 10.123.1.193 8022
          """

          utils.startWindowsService("ivy-elasticsearch-master-cluster")
          utils.startWindowsService(configs['node1']['engineService'])

          echo "====================Deploy Portal modules===================="
          println powershell(returnStdout: true, script: """
            \$DEPLOYMENT= "${configs['node1']['engineDir']}\\deploy\\Portal"
            Copy-Item Showcase\\portal-demo-app\\target\\*zip -Destination \$DEPLOYMENT
            Start-Sleep 6
            Copy-Item Showcase\\portal-developer-examples\\target\\*iar -Destination \$DEPLOYMENT
            Start-Sleep 2
            Copy-Item AxonIvyPortal\\PortalKitTestHelper\\target\\*iar -Destination \$DEPLOYMENT
            Start-Sleep 2
            Copy-Item Showcase\\InternalSupport\\target\\*iar -Destination \$DEPLOYMENT
          """)

          bat """
            mklink /j ${configs['node2']['engineDir']}\\applications ${masterNodeDir}\\applications
            """
          utils.startWindowsService(configs['node2']['engineService'])
        }
      }
    }
  }

}
