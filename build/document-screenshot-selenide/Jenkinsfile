pipeline {
  agent {label 'portal-slave'}

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '60'))
  }

  triggers {
    cron('0 15 * * *')
  }

  tools {
    maven '3.9'
    jdk '21'
  }

  parameters {
    string(name: 'testPatternToRun', defaultValue: 'com.axonivy.portal.selenium.document.screenshot.*Test', description: 'Test pattern to run')
    string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine-windows.zip', description: '''Where to download engine? e.g.
      -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine-windows.zip for nightly master
      -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine-windows.zip for dev master
      -Divy.engine.download.url=file:///C:/wawa/engine/AxonIvyEngineX.X.X.X_Windows_x64.zip for downloaded engine
      -Divy.engine.list.url=https://jenkins.ivyteam.io/job/core_product/job/release%252F9.4/lastSuccessfulBuild/artifact/workspace/ch.ivyteam.ivy.server.product/target/products/ -Divy.engine.os.arch=Windows_x64 for last successful build 9.4
    ''')
    booleanParam(name: 'useForDocumentation', defaultValue: false, description: 'Make screenshots available to use in upcomming documentation builds. CAUTION: Only enable this option when you run with default test pattern.')
    booleanParam(name: 'checkoutCodeFromLatestReleaseTag', defaultValue: false, description: 'Turn on when you want to release new Portal screenshots, it will checkout the code from latest release tag')
  }

  environment {
    releaseDir = 'archive'
    engineDir = "$env.WORKSPACE/AxonIvyPortal/portal-selenium-test/engine"
    shareDir = 'C:/tools/shared/document-screenshots'
  }

  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          def utils = load 'build/common/utils.groovy'
          utils.init()
          utils.stopAllEngines()

          utils.downloadExpress()
          def expressFile = findFiles(glob: 'archive/**/axonivy-express*.iar')[0].path

          if (params.checkoutCodeFromLatestReleaseTag) {
            downloadPortalRelease()

            echo '====================Check out tag of Portal latest successful release===================='
            powershell '''
              $artifactPattern = $env:releaseDir + '/AxonIvyPortal/portal/target/*.iar'
              $artifactName = dir $artifactPattern | select -expand BaseName
              $versionLastestReleasedPortal = $artifactName.substring(7)
              git fetch --tags
              git checkout tags/$versionLastestReleasedPortal
              git reset --hard HEAD
              git clean -fd
            '''

            echo '====================Copy patch to workspace if any. Note: this is in a tag and we cannot change code in git repo===================='
            powershell '''
              if (Test-Path ../patch/master) {
                copy -path ../patch/master -recurse -force -destination .
              }
            '''
            downloadExpressIntegration()
            expressFile = findFiles(glob: 'archive/**/axonivy-express*.iar')[0].path
          }


          utils.extractEngine(env.engineDir, params.engineDownloadURL)

          echo '====================Run script to copy decorate js and css to Portal===================='
          bat 'AxonIvyPortal/portal-selenium-test/resources/copy-decorate-js-css.bat'

          echo '====================Build Portal modules===================='
          def modules = ['AxonIvyPortal/portal-components', 'AxonIvyPortal/portal', 'AxonIvyPortal/PortalKitTestHelper', 'Showcase/portal-user-examples', 'Showcase/portal-developer-examples', 'Showcase/InternalSupport', 'Showcase/portal-components-examples', 'AxonIvyPortal/PortalApp', 'Showcase/portal-demo-app']
          for (module in modules) {
            bat "mvn clean install -f ${module}/pom.xml -Divy.engine.directory=%engineDir%"
          }

          echo '====================Deploy Portal modules===================='
          powershell """
            \$DEPLOYMENT= \$env:engineDir + "/system/demo-applications/demo-portal"
            rmdir \$DEPLOYMENT/* -recurse
            Copy-Item Showcase/portal-demo-app/target/*zip -Destination \$DEPLOYMENT
            Copy-Item Showcase/portal-developer-examples/target/*iar -Destination \$DEPLOYMENT
            Copy-Item Showcase/portal-components-examples/target/*iar -Destination \$DEPLOYMENT
            Copy-Item ${expressFile} -Destination \$DEPLOYMENT
          """

          utils.killUnnecessaryProcessesToRunTest()

          echo '====================Execute maven for testing===================='
          bat "mvn clean install -f AxonIvyPortal/portal-selenium-test/document_screenshot_pom.xml %engineDownloadURL% -Dtest=${params.testPatternToRun} -DbrowserType=FIREFOX -DtrimStackTrace=false -Divy.engine.directory=%engineDir% -Divy.deploy.timeout.seconds=60 -Divy.compiler.engine.start.timeout=120"
          utils.cleanDisk()

          echo '====================Copy ElasticSearch log===================='
          powershell '''
            $LOG= $env:engineDir + "/elasticsearch/logs/ivy-elasticsearch-*.log"
            Copy-Item $LOG -Destination AxonIvyPortal/portal-selenium-test/target
          '''
          if (params.useForDocumentation) {
            echo '====================Copy screenshots to shared directory===================='
            powershell """
              Copy-Item  AxonIvyPortal/portal-selenium-test/target/*.zip -Destination ${shareDir}
            """
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'AxonIvyPortal/portal-selenium-test/target/*.zip', allowEmptyArchive: true
      archiveArtifacts artifacts: 'AxonIvyPortal/portal-selenium-test/target/selenide/reports/**/*.*, AxonIvyPortal/portal-selenium-test/target/testEngineOut.log, AxonIvyPortal/portal-selenium-test/target/ivy-elasticsearch-*.log', allowEmptyArchive: true
      junit allowEmptyResults: true, testResults: '**/surefire-reports/TEST-*.xml'
    }
  }
}

def downloadPortalRelease() {
  echo '====================Download Portal latest successful release===================='
  def branchName = env.BRANCH_NAME.replaceAll('/', '%%2F')
  withCredentials([usernameColonPassword(credentialsId: 'wawa-jenkins', variable: 'credentials')]) {
    bat "curl --user ${credentials} --output archive.zip ${env.JENKINS_URL}job/portal-release/job/${branchName}/lastSuccessfulBuild/artifact/*zip*/archive.zip"
  }
  unzip zipFile: 'archive.zip', quiet: true
}

def downloadExpressIntegration() {
  echo '====================Download Express latest successful integration===================='
  def branchName = env.BRANCH_NAME.replaceAll('/', '%%2F')
  withCredentials([usernameColonPassword(credentialsId: 'wawa-jenkins', variable: 'credentials')]) {
    bat "curl --user ${credentials} --output archive-express.zip ${env.JENKINS_URL}job/axonivy-express-integration/job/develop/lastSuccessfulBuild/artifact/*zip*/archive.zip"
  }
  unzip zipFile: 'archive-express.zip', quiet: true
}

