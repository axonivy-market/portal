pipeline {
  agent any
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron('0 23 * * *')
  }

  parameters {
      string(name: 'testPatternToRun', defaultValue: 'portal.guitest.document.screenshot.*Test', description: 'Screenshot test pattern')
      string(name: 'engineDownloadURL', defaultValue: '-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip', description: '''Where to download engine? e.g.
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip for nightly master
        -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine.zip for dev master
      ''')
       booleanParam(name: 'deployToRepo', defaultValue: false, description: 'Force deploy new version of screenshots. CAUTION: Only enable this option when you run with default test pattern.')
       booleanParam(name: 'checkoutCodeFromLatestReleaseTag', defaultValue: false, description: 'Turn on when you want to release new Portal screenshots, it will checkout the code from latest release tag')
  }

  stages {
    stage('build') {
      steps {
        script {
          releaseDir = 'archive'
          engineDir = "${pwd()}/AxonIvyPortal/PortalTest/engine"
          def utils = load 'build/common/utils.groovy'
          //utils.init()
          //utils.stopAllEngines()

          docker.build("portal", "-f build/Dockerfile .").inside("-v /var/tools/maven-cache:/home/build/") {
          if(params.checkoutCodeFromLatestReleaseTag) {
              downloadPortalRelease()

              echo '====================Check out tag of Portal latest successful release===================='
              powershell '''
                $artifactPattern = ${releaseDir} + '/AxonIvyPortal/portal/target/*.iar' 
                $artifactName = dir $artifactPattern | select -expand BaseName
                $versionLastestReleasedPortal = $artifactName.substring(7)
                git fetch --tags
                git checkout tags/$versionLastestReleasedPortal
                git reset --hard HEAD
                git clean -fd
              '''

              echo '====================Copy patch to workspace if any. Note: this is in a tag and we cannot change code in git repo===================='
              powershell '''
                if (Test-Path ../patch/master) {
                  copy -path ../patch/master -recurse -force -destination .
                }
              '''
          }

          utils.extractEngine(engineDir, params.engineDownloadURL)

          echo '====================Run script to copy decorate js and css to Portal===================='
          sh "chmod 777 -R AxonIvyPortal"
          sh "AxonIvyPortal/PortalTest/resources/copy-decorate-js-css.sh"
          
          echo "====================Build Portal modules===================="
          def modules = ['AxonIvyPortal/portal-components', 'AxonIvyPortal/portal', 'AxonIvyPortal/AxonIvyExpress', 'AxonIvyPortal/PortalKitTestHelper', 'Showcase/portal-user-examples', 'Showcase/portal-developer-examples', 'Showcase/InternalSupport', 'Showcase/portal-components-examples', 'AxonIvyPortal/PortalApp', 'Showcase/portal-demo-app']
          for (module in modules) {
            maven cmd: "clean install -f ${module}/pom.xml -Divy.engine.directory=${engineDir}"
          }

          echo "====================Deploy Portal modules===================="
          deployment = engineDir + "/system/demo-applications/demo-portal";
          sh "rm -r ${deployment}/*"
          sh "cp Showcase/portal-demo-app/target/*zip ${deployment}"        
          sh "cp Showcase/portal-developer-examples/target/*iar ${deployment}"        
          sh "cp Showcase/portal-components-examples/target/*iar ${deployment}"

          //node('master') {
           // utils.remoteDesktop()
          //}

          //utils.killUnnecessaryProcessesToRunTest()

          echo '====================Execute maven for testing===================='
          def mavenGoal = params.deployToRepo? 'deploy' : 'install'
          maven cmd: "clean ${mavenGoal} -f AxonIvyPortal/PortalTest/document_screenshot_pom.xml ${params.engineDownloadURL} -Dtest=${params.testPatternToRun} -DbrowserType=FIREFOX -DtrimStackTrace=false -Divy.engine.directory=${engineDir} -Divy.deploy.timeout.seconds=60 -Divy.compiler.engine.start.timeout=120"
          //utils.cleanDisk()

          //node('master') {
          //  utils.closeAllRemoteDesktopConnections()
          //}

          }
          
          echo "====================Copy ElasticSearch log===================="
          def log= ${engineDir} + "/elasticsearch/logs/ivy-elasticsearch-*.log"
          sh "cp ${engineDir} AxonIvyPortal/PortalTest/target"
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: "AxonIvyPortal/PortalTest/target/*.zip", allowEmptyArchive: true
      archiveArtifacts artifacts: "AxonIvyPortal/PortalTest/target/test/*/*.jpg, AxonIvyPortal/PortalTest/target/testEngineOut.log, , AxonIvyPortal/PortalTest/target/ivy-elasticsearch-*.log", allowEmptyArchive: true
      junit allowEmptyResults: true, testResults: '**/surefire-reports/TEST-*.xml'
    }
  }
}

def downloadPortalRelease() {
  echo '====================Download Portal latest successful release===================='
  def branchName = env.BRANCH_NAME.replaceAll("/", "%%2F")
  withCredentials([usernameColonPassword(credentialsId: 'jenkins-guest-cred', variable: 'jenkinsGuestCred')]) {
    sh "curl --user ${jenkinsGuestCred} --output archive.zip ${env.JENKINS_URL}job/PortalRelease/job/${branchName}/lastSuccessfulBuild/artifact/*zip*/archive.zip"
  }
  unzip zipFile: 'archive.zip', quiet: true
}
