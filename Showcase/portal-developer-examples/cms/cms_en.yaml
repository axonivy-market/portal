Categories:
  AnnualLeave:
    name: Annual Leave
  LeaveRequest:
    name: Leave Request
  OtherLeave:
    Maternity:
      name: Maternity
    SickLeave:
      Long:
        name: Long
      name: Sick Leave
    name: Other Leave
DefaultColumns:
  ACTIVATOR: Responsible
  CREATION_TIME: Created
  EXPIRY_TIME: Expiry
  ID: Task Id
  NAME: Name / Description
  PRIORITY: Priority
  STATE: State
  caseList:
    CREATION_TIME: Created
    CREATOR: Creator
    FINISHED_TIME: Finished
    ID: Case Id
    NAME: Name / Description
    OWNER: Owner
    STATE: State
    customTimestampField1: Shipment date
    customVarCharField1: Customer name
  customTimestampField1: Shipment date
  customVarCharField5: Customer name
Dialogs:
  Lists:
    Completeness:
      ADDITIONAL_IDENTIFICATION_NEEDED: Additional identification needed
      NO_INFORMATION: No information available
      PERSON_LEGITIMIZED: Person legitmized
      REQUEST_PROOF: Request proof of identification
    ProcessState:
      APPLICATION: Application
      DONE: Done
      IDENTITY_CHECK: Identity Check
      INFORMATION: Information
      INQUIRY: Inquiry
      PROCESSING: Edit
      VERIFICATION: Verification
  ch:
    ivyteam:
      ivy:
        project:
          portal:
            examples:
              testdata:
                LeaveRequestForm:
                  Employee: Employee
                  From: From
                  IsRequired: This field is mandatory
                  Representation: Representation
                  To: To
  com.axonivy.portal.developerexamples:
    AlphaCompany:
      CaseName: |-
        Conduct market research/Market research will tell company if there’s an opportunity to turn our idea into a successful business. It’s a way to gather information about potential customers and businesses already operating in our area.;
        Write Alpha business plan/Company business plan is the foundation of our business. It’s a roadmap for how to structure, run, and grow your new business.;
        Fund Alpha business/Company business plan will help us figure out how much money we’ll need to start your business.;
        Pick Alpha business location/Company location is one of the most important decisions we’ll make. Whether we’re setting up a brick-and-mortar business or launching an online store, the choices we make could affect your taxes, legal requirements, and revenue.;
        Choose a business structure/The legal structure we choose for our business will impact our business registration requirements.;
        Choose Alpha business name/It’s not easy to pick the perfect name. We’ll want one that reflects our brand and captures your spirit.;
        Register Alpha business/Once we’ve picked the perfect business name, it’s time to make it legal and protect our brand.;
        Get federal and state tax IDs/We’ll use our employer identification number (EIN) for important steps to start and grow our business, like opening a bank account and paying taxes.;
        Apply for licenses and permits/Keep company running smoothly by staying legally compliant. The licenses and permits need for company will vary by industry, state, location, and other factors.;
        Open a business bank account/A small business checking account can help company handles legal, tax, and day-to-day issues.;
        Congratulations!/It's time to cut the big ribbon. Your business is officially open. Now, focus on managing and growing your business.;
    LeaveRequestForm:
      Employee: Employee
      From: From
      IsRequired: This field is mandatory
      Representation: Representation
      To: To
    testConten: "nanoScroller.js is a jQuery plugin that offers a simplistic way of implementing Mac OS X Lion-styled scrollbars for your website. It uses minimal HTML markup being .nano > .nano-content. The other scrollbar div elements .pane > .nano-slider are added during run time to prevent clutter\
      \ in templating. The latest version utilizes native scrolling and works with the iPad, iPhone, and some Android Tablets.\r\n\r\nDownloads\r\nProduction version\r\nDevelopment version\r\nDefault stylesheet\r\nTo start using, you need three basic things:\r\n\r\n1. Markup\r\nThe following type of markup\
      \ structure is needed to make the plugin work:\r\n\r\n<div id=\"about\" class=\"nano\">\r\n    <div class=\"nano-content\"> ... content here ...  </div>\r\n</div>\r\nCopy the HTML markup. Change .nano into something related to your content. Though you can also remove that attribute as long as you\
      \ have a parent div with an ID reference. e.g. #parent > .nano. nano and nano-content classnames can be customized via plugin options (in that case you must rename them inside the plugin's CSS file as well).\r\n\r\n2. CSS\r\nLink to the nanoscroller.css file inside your page's <head> section (...or\
      \ copy the contents from it to your page's main stylesheet file).\r\n\r\n<link rel=\"stylesheet\" href=\"nanoscroller.css\">\r\nYou should specify a width and a height to your container, and apply some custom styling for your scrollbar. Here's an example:\r\n\r\n.nano { background: #bba; width:\
      \ 500px; height: 500px; }\r\n.nano .nano-content { padding: 10px; }\r\n.nano .nano-pane   { background: #888; }\r\n.nano .nano-slider { background: #111; }\r\n3. JavaScript\r\nRunning this script will apply the nanoScroller plugin to all DOM elements with a .nano className.\r\n\r\n$(\".nano\").nanoScroller();\r\
      \nAdvanced methods\r\nscroll\r\nTo scroll at the top:\r\n\r\n$(\".nano\").nanoScroller({ scroll: 'top' });\r\nTo scroll at the bottom:\r\n\r\n$(\".nano\").nanoScroller({ scroll: 'bottom' });\r\nTo scroll at the top with an offset value:\r\n\r\n$(\".nano\").nanoScroller({ scrollTop: value });\r\n\
      To scroll at the bottom with an offset value:\r\n\r\n$(\".nano\").nanoScroller({ scrollBottom: value });\r\nTo scroll to an element:\r\n\r\n$(\".nano\").nanoScroller({ scrollTo: $('#a_node') });\r\nstop:\r\nTo stop the operation. This option will tell the plugin to disable all event bindings and\
      \ hide the gadget scrollbar from the UI.\r\n\r\n$(\".nano\").nanoScroller({ stop: true });\r\ndestroy:\r\nDestroys nanoScroller and restores browser's native scrollbar.\r\n\r\n$(\".nano\").nanoScroller({ destroy: true });\r\nflash:\r\nTo flash the scrollbar gadget for an amount of time defined in\
      \ plugin settings (defaults to 1,5s). Useful if you want to show the user (e.g. on pageload) that there is more content waiting for him.\r\n\r\n$(\".nano\").nanoScroller({ flash: true });\r\nnanoScroller();\r\nRefresh the scrollbar. This simply re-calculates the position and height of the scrollbar\
      \ gadget.\r\n\r\n$(\".nano\").nanoScroller();\r\nCustom events\r\n'scrollend'\r\nA custom 'scrollend' event is triggered on the element every time the user has scrolled to the end of the content element (does not get triggered more than once when user tries to scroll down and has already reached\
      \ the end of scrollable content).\r\n\r\n$(\".nano\").bind(\"scrollend\", function(e){\r\n    console.log(\"current HTMLDivElement\", e.currentTarget);\r\n});\r\nSome browsers trigger this event more than once each time, so to listen to the custom event, instead of using jQuery's normal .bind or\
      \ .on, you most likely want to use this tiny jQuery debounce plugin to prevent browsers from firing your function more than once every 100ms.\r\n\r\n$(\".nano\").debounce(\"scrollend\", function() {\r\n    alert(\"The end\");\r\n}, 100);\r\n'scrolltop'\r\nSame as the 'scrollend' event, but it is\
      \ triggered every time the user has scrolled to the top of the content element.\r\n\r\nPlugin Options\r\nThere are a few options that you can change when running nanoScroller, e.g. $(\".nano\").nanoScroller({ paneClass: 'myclass' });\r\n\r\niOSNativeScrolling\r\nSet to true if you want to use native\
      \ scrolling in iOS 5+. This will disable your custom nanoScroller scrollbar in iOS 5+ and use the native one instead. While the native iOS scrollbar usually works much better, there could possibly be bugs in certain situations.\r\n\r\nNotice that .pane and .slider elements are not generated/added\
      \ for devices that support iOS native scrolling when iOSNativeScrolling option is enabled.\r\n\r\nDefault: false\r\n\r\n$(\".nano\").nanoScroller({ iOSNativeScrolling: true });\r\nsliderMinHeight\r\nSets the minimum height of the slider element.\r\n\r\nDefault: 20\r\n\r\n$(\".nano\").nanoScroller({\
      \ sliderMinHeight: 40 });\r\nsliderMaxHeight\r\nSets the maximum height of the slider element.\r\n\r\nDefault: null\r\n\r\n$(\".nano\").nanoScroller({ sliderMaxHeight: 200 });\r\npreventPageScrolling\r\nSet to true to prevent page scrolling when top or bottom inside the content div is reached.\r\
      \n\r\nDefault: false\r\n\r\n$(\".nano\").nanoScroller({ preventPageScrolling: true });\r\ndisableResize\r\nSet to true to disable the resize from nanoscroller. Useful if you want total control of the resize event. If you set this option to true remember to call the reset method so that the scroll\
      \ don't have strange behavior.\r\n\r\nDefault: false\r\n\r\n$(\".nano\").nanoScroller({ disableResize: true });\r\nalwaysVisible\r\nSet to true to stop the scrollbar from auto-hiding itself.\r\n\r\nDefault: false\r\n\r\n$(\".nano\").nanoScroller({ alwaysVisible: true });\r\nflashDelay:\r\nUse this\
      \ setting to specify the scrollbar hide delay in milliseconds if you have enabled the flash option.\r\n\r\n$(\".nano\").nanoScroller({ flashDelay: 1000 });\r\nDefault: 1500\r\n\r\npaneClass\r\nA classname for scrollbar track element. If you change this setting, you also have to change it in the\
      \ plugin's CSS file.\r\n\r\nDefault: 'nano-pane'\r\n\r\n$(\".nano\").nanoScroller({ paneClass: 'scrollPane' });\r\nsliderClass\r\nA classname for scrollbar thumb element. If you change this setting, you also have to change it in the plugin's CSS file.\r\n\r\nDefault: 'nano-slider'\r\n\r\n$(\".nano\"\
      ).nanoScroller({ sliderClass: 'scrollSlider' });\r\ncontentClass\r\nA classname for your content div. If you change this setting, you also have to change it in the plugin's CSS file.\r\n\r\nDefault: 'nano-content'\r\n\r\n$(\".nano\").nanoScroller({ contentClass: 'sliderContent' });\r\ntabIndex\r\
      \nSet the tab order of the scrollable content. Set to -1 to skip over the scrollable content when tabbing.\r\n\r\nDefault: 0\r\n\r\n$(\".nano\").nanoScroller({ tabIndex: 0 });\r\nHow it works\r\nFig 1.\r\n\r\nThe plugin works by creating a scrollbar gadget (with pre-defined css for styling) and\
      \ then subscribing the .nano-content's scroll events to it. Mouse press and drag events are also subscribed to the .nano-pane and .nano-pane > .nano-slider to emulate the native scrollbar's mechanism. The system scrollbars are hidden from the viewport (Fig 1). By doing this, we still retain the\
      \ natural scrolling experience provided by the OS.\r\n\r\nWe are still working on doing a horizontal scrolling feature. If you're interested in contributing to the project, you are free to fork it and create a pull request.\r\n\r\nDevelopment\r\nTo build nanoScroller from source you need the following\
      \ libraries installed:\r\n\r\nNode.js and npm: homepage / download\r\nGrunt: homepage | npm install -g grunt-cli\r\nHow to build & contribute\r\nMake sure that you have Grunt installed.\r\nIn terminal move to nanoscroller folder and run npm install to install all dependencies.\r\nMake all Javascript\
      \ changes in Coffeescript file(s), CSS changes in CSS file(s).\r\nrun grunt to build nanoScroller\r\nMake sure that all changes are valid and open a pull request.\r\nHow to run tests\r\nYou need to have PhantomJS installed. On Mac OS X the easiest way is to install Homebrew and run brew install\
      \ phantomjs.\r\nrun grunt test in terminal\r\nBrowser compatibility\r\nTested desktop browsers:\r\n\r\nIE7+\r\nFirefox 3+\r\nChrome\r\nSafari 4+\r\nOpera 11.60+\r\nMobile support:\r\n\r\niOS 5+ (iPhone, iPad and iPod Touch)\r\niOS 4 (with a polyfill)\r\nAndroid Firefox\r\nAndroid 2.2/2.3 native\
      \ browser (with a polyfill)\r\nAndroid Opera 11.6 (with a polyfill)\r\nIf you see it's broken on other tablets and mobile devices, please file a ticket in the git repo. Along with model name, and OS of the device.\r\nIf you find a bug, please report here at the issues section.\r\n\r\nUsing a polyfill\
      \ for better mobile browser support\r\nYou can use overthrow.js polyfill (~1.5kb minified and gzipped) to make nanoScroller work on many mobile devices. It emulates CSS overflow (overflow: auto;/overflow: scroll;) in devices that are lacking it.\r\n\r\nTo use overthrow, link to the javascript file\
      \ in your HTML document...\r\n\r\n<script src=\"overthrow.js\"></script>\r\n...and add an overthrow class to your content div.\r\n\r\n<div id=\"about\" class=\"nano\">\r\n    <div class=\"overthrow nano-content\"> ... content here ...  </div>\r\n</div>\r\nContributors\r\njamesflorentino\r\nkristerkari\r\
      \nOther people who have contributed code:\r\n\r\nweareoutman #170\r\nSailias #138\r\nantonpinchuk #123\r\nmiljan-aleksic #144\r\ncallmevlad #122\r\nbobo76 #115\r\nmente #110\r\nlivskiy #83\r\niStefo #65\r\ntahajahangir #60\r\nn0valyfe #57\r\njohanbaath #42\r\nmarcelombc #40, #46\r\nzacstewart #30\r\
      \nmichael-lefebvre #22, #29\r\nAlicanC #28\r\ncamerond #26\r\njesstelford #23\r\nlluchs #7, #8\r\nDlom\r\nCredits\r\nInitially written by James Florentino in CoffeeScript\r\nReleased under MIT License"
Labels:
  address: Street/No.
  cancel: Cancel
  caseId: Case ID
  city: /City
  date: Date
  delete: Delete
  email: E-Mail
  firstName: First name
  id: ID
  personalData: Personal data
  phoneNumber: Phone number
  proceed: Proceed
  reason: Reason
  request: Request
  requestType: Request type
  surName: Surname
  tableDelete: Delete
  tableDownload: Download
  tableName: Name
  zip: ZIP
Processes:
  CategoriedLeaveRequest:
    processStep: |-
      #Creation
      Choose different leave types
      Use a date picker to select leave dates
      Select an approver for your leave request
      #Approval
      Add a comment to the request
      Take a decision: Approve / Reject
      #Summary
      Requester will get a summary of the request
      Acknoledge the result
  CreateInvestment:
    name: Create Investment
  ProcessHistoryComponent:
    AlphaCompany:
      name: Alpha Company Task
    ProcessHistoryOfAlphaCompany:
      name: View Alpha Process History
    ProcessHistoryOfAlphaCompanyInDialog:
      name: View Alpha Process History in Dialog
sortFields:
  CREATION_TIME_ASC: Creation date (Oldest first)
  CREATION_TIME_DESC: Creation date (Newest first)
  EXPIRY_TIME_ASC: Expiry (Oldest first)
  EXPIRY_TIME_DESC: Expiry (Newest first)
  PRIORITY_ASC: Priority (High -> low)
  PRIORITY_DESC: Priority (Low -> high)
  customTimestampField1_ASC: Shipment date (Oldest first)
  customTimestampField1_DESC: Shipment date (Newest first)
  customVarCharField5_ASC: Customer name (A -> Z)
  customVarCharField5_DESC: Customer name (Z -> A)
