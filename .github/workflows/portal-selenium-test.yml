name: Portal Selenium Test
run-name: 🔆 Portal Selenium Test
permissions: read-all
on:
  workflow_dispatch:
    inputs:
      testPatternToRun:
        description: 'Test pattern to run'
        type: string
        default: 'com.axonivy.portal.selenium.test.**.*Test'
        required: true
      engineDownloadURL:
        description: |
          url to download engine, default is the nightly build.
        type: string
        default: 'https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip'
        required: true

env:
  ENGINE_DIR: $GITHUB_WORKSPACE/ivy/engine
  ENGINE_URL: https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip

jobs:
  show-branch-info:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 20  # Fetch more commits for history

      - name: Show commits since last successful build
        uses: actions/github-script@v8
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const workflowName = 'Portal Selenium Test';
            
            try {
              // Get the last successful workflow run for this branch
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'portal-selenium-test.yml',
                branch: branch,
                status: 'success',
                per_page: 1
              });

              let lastSuccessfulSha = null;
              let lastSuccessfulDate = null;
              
              if (workflowRuns.workflow_runs && workflowRuns.workflow_runs.length > 0) {
                const lastRun = workflowRuns.workflow_runs[0];
                lastSuccessfulSha = lastRun.head_sha;
                lastSuccessfulDate = lastRun.created_at;
              }

              let commits = [];
              let comparisonInfo = '';
              
              if (lastSuccessfulSha && lastSuccessfulSha !== context.sha) {
                // Compare commits between last successful build and current commit
                try {
                  const { data: comparison } = await github.rest.repos.compareCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    base: lastSuccessfulSha,
                    head: context.sha
                  });
                  commits = comparison.commits || [];
                  
                  const lastSuccessfulDateFormatted = new Date(lastSuccessfulDate).toLocaleString('vi-VN', {
                    timeZone: 'Asia/Ho_Chi_Minh',
                    hour12: false
                  });
                  
                  const lastRun = workflowRuns.workflow_runs[0];
                  const buildUrl = `${lastRun.html_url}`;
                  
                  comparisonInfo = `📊 Comparing with last successful build: [#${lastRun.run_number}](${buildUrl}) - [${lastSuccessfulSha.substring(0, 7)}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${lastSuccessfulSha}) (${lastSuccessfulDateFormatted})`;
                } catch (compareError) {
                  console.log('Could not compare with last successful build, showing recent commits instead');
                  const { data: recentCommits } = await github.rest.repos.listCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    sha: context.sha,
                    per_page: 10
                  });
                  commits = recentCommits;
                  comparisonInfo = '⚠️ Could not compare with last build, showing recent commits';
                }
              } else if (lastSuccessfulSha === context.sha) {
                comparisonInfo = '✅ This commit was the last successful build - no new changes';
              } else {
                // No previous successful build found, show recent commits
                const { data: recentCommits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  per_page: 10
                });
                commits = recentCommits;
                comparisonInfo = '🆕 No previous successful build found - showing recent commits';
              }

              // Build the summary
              if (!commits || commits.length === 0) {
                await core.summary
                  .addHeading(`📝 Changes since last successful build on '${branch}'`)
                  .addRaw(comparisonInfo)
                  .addRaw('\n\n*No new commits found*')
                  .write();
                return;
              }

              const commitCount = commits.length;
              const maxDisplay = commitCount; // Show all commits
              
              await core.summary
                .addHeading(`📝 Changes since last successful build on '${branch}' (${commitCount} commit${commitCount !== 1 ? 's' : ''})`)
                .addRaw(comparisonInfo)
                .addTable([
                  [
                    { data: 'Commit', header: true },
                    { data: 'Message', header: true },
                    { data: 'Author', header: true },
                    { data: 'Date', header: true }
                  ],
                  ...commits.slice(0, maxDisplay).map(commit => {
                    // Get full commit message with title and description
                    const fullMessage = commit.commit.message.trim();
                    const lines = fullMessage.split('\n');
                    const title = lines[0];
                    
                    // Include description if it exists (skip empty lines after title)
                    let description = '';
                    if (lines.length > 1) {
                      const descLines = lines.slice(1).filter(line => line.trim() !== '');
                      if (descLines.length > 0) {
                        description = descLines.join(' ').trim();
                        // Limit description length to avoid too wide tables
                        if (description.length > 200) {
                          description = description.substring(0, 200) + '...';
                        }
                      }
                    }
                    
                    const messageColumn = description ? 
                      `${title.replace(/\|/g, '\\|')}<br/>${description.replace(/\|/g, '\\|')}` : 
                      title.replace(/\|/g, '\\|');
                    
                    return [
                      `[${commit.sha.substring(0, 7)}](${commit.html_url})`,
                      messageColumn,
                      `@${commit.author?.login || commit.commit.author.name}`,
                      new Date(commit.commit.author.date).toLocaleString('vi-VN', {
                        timeZone: 'Asia/Ho_Chi_Minh',
                        hour12: false
                      })
                    ];
                  })
                ])
                .write();
                
            } catch (error) {
              console.error('Error fetching commits since last build:', error);
              await core.summary
                .addHeading(`📝 Error fetching commits for branch '${branch}'`)
                .addRaw(`Could not retrieve commit information: ${error.message}`)
                .write();
            }

      - name: Show PRs merged since last successful build
        uses: actions/github-script@v8
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            
            try {
              // Get the last successful workflow run for this branch (same logic as commits)
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'portal-selenium-test.yml',
                branch: branch,
                status: 'success',
                per_page: 1
              });

              let lastSuccessfulDate = null;
              let prComparisonInfo = '';
              
              if (workflowRuns.workflow_runs && workflowRuns.workflow_runs.length > 0) {
                const lastRun = workflowRuns.workflow_runs[0];
                lastSuccessfulDate = new Date(lastRun.created_at);
                
                const lastSuccessfulDateFormatted = lastSuccessfulDate.toLocaleString('vi-VN', {
                  timeZone: 'Asia/Ho_Chi_Minh',
                  hour12: false
                });
                
                const buildUrl = `${lastRun.html_url}`;
                
                prComparisonInfo = `📊 PRs merged since last successful build: [#${lastRun.run_number}](${buildUrl}) (${lastSuccessfulDateFormatted})`;
              } else {
                prComparisonInfo = '🆕 No previous successful build found - showing recent merged PRs';
              }

              // Get all merged PRs for this branch
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: branch,
                state: 'closed',
                per_page: 50,
                page: 1
              });

              let relevantPrs = [];
              
              if (lastSuccessfulDate) {
                // Filter PRs merged after the last successful build
                relevantPrs = prs
                  .filter(pr => pr.merged_at !== null && new Date(pr.merged_at) > lastSuccessfulDate)
                  .sort((a, b) => new Date(b.merged_at) - new Date(a.merged_at));
              } else {
                // No previous successful build, show recent merged PRs
                relevantPrs = prs
                  .filter(pr => pr.merged_at !== null)
                  .sort((a, b) => new Date(b.merged_at) - new Date(a.merged_at))
                  .slice(0, 10);
              }

              if (relevantPrs.length === 0) {
                await core.summary
                  .addHeading(`🔗 PRs merged since last successful build on '${branch}'`)
                  .addRaw(prComparisonInfo)
                  .addRaw('\n\n*No PRs merged since last successful build*')
                  .write();
                return;
              }

              const maxDisplay = relevantPrs.length; // Show all PRs
              
              await core.summary
                .addHeading(`🔗 PRs merged since last successful build on '${branch}' (${relevantPrs.length} PR${relevantPrs.length !== 1 ? 's' : ''})`)
                .addRaw(prComparisonInfo)
                .addTable([
                  [
                    { data: 'PR Number', header: true },
                    { data: 'Title', header: true },
                    { data: 'Author', header: true },
                    { data: 'Merged At', header: true }
                  ],
                  ...relevantPrs.slice(0, maxDisplay).map(pr => [
                    `[#${pr.number}](${pr.html_url})`,
                    pr.title.replace(/\|/g, '\\|'),
                    `@${pr.user.login}`,
                    new Date(pr.merged_at).toLocaleString('vi-VN', {
                      timeZone: 'Asia/Ho_Chi_Minh',
                      hour12: false
                    })
                  ])
                ])
                .write();
                
            } catch (error) {
              console.error('Error fetching PRs since last build:', error);
              await core.summary
                .addHeading(`🔗 Error fetching PRs for branch '${branch}'`)
                .addRaw(`Could not retrieve PR information: ${error.message}`)
                .write();
            }


  portal-selenium-test:
      runs-on: ubuntu-latest
      needs: show-branch-info
      steps:
        - name: Checkout code
          uses: actions/checkout@v5

        - name: Set up Java
          uses: actions/setup-java@v5
          with:
            distribution: 'temurin'
            java-version: '21'

        - name: Set up Maven
          uses: stCarolas/setup-maven@v5
          with:
            maven-version: 3.9.8
      
        - name: Export environment variables
          run: |
            echo "export IVY_JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            echo "export JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            echo "export PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
            
        - name: Set up and verify directories
          run: |
            ENGINE_DIR="${GITHUB_WORKSPACE}/ivy/engine/nightly"
            mkdir -p $ENGINE_DIR
            sudo chown -R $USER:$USER $ENGINE_DIR
            echo "ENGINE_DIR=$ENGINE_DIR" >> $GITHUB_ENV

        - name: Download engine
          run: |
            cd $ENGINE_DIR
            wget $ENGINE_URL -O axonivy-engine.zip
            unzip -o axonivy-engine.zip -d .
            rm axonivy-engine.zip

        - name: Verify engine directory
          run: |
            if [ ! -d "$ENGINE_DIR" ]; then
              echo "Engine directory does not exist"
              exit 1
            fi

        - name: Build Portal modules
          run: |
            modules=(
              "AxonIvyPortal/portal-components"
              "AxonIvyPortal/portal"
              "AxonIvyPortal/PortalKitTestHelper"
              "Showcase/portal-user-examples"
              "Showcase/portal-developer-examples"
              "Showcase/InternalSupport"
              "Showcase/portal-components-examples"
              "AxonIvyPortal/PortalApp"
              "Showcase/portal-demo-app"
            )
            for module in "${modules[@]}"; do
              mvn clean install -f $module/pom.xml -Divy.engine.directory=$ENGINE_DIR
            done

        - name: Deploy Portal Modules
          run: |
            DEPLOYMENT=$ENGINE_DIR/system/demo-applications/demo-portal
            rm -rf $DEPLOYMENT/*
            cp Showcase/portal-demo-app/target/*.zip $DEPLOYMENT
            cp Showcase/portal-developer-examples/target/*.iar $DEPLOYMENT
            cp Showcase/portal-components-examples/target/*.iar $DEPLOYMENT
      
        - name: Run test
          id: run-test        
          run: |
            mvn clean test -f AxonIvyPortal/portal-selenium-test/customized_pom.xml -Divy.engine.download.url=${{ inputs.engineDownloadURL }} -Dtest=${{ inputs.testPatternToRun }} -DbrowserType=FIREFOX -DtrimStackTrace=false -Divy.engine.directory=$ENGINE_DIR -Divy.deploy.timeout.seconds=60 -Divy.engine.start.timeout.seconds=500 -Dsurefire.rerunFailingTestsCount=2
          continue-on-error: true

        - name: Log out on failures
          if: steps.run-test.outcome == 'failure'
          run: |
            cat AxonIvyPortal/portal-selenium-test/target/testEngineOut.log 

        - name: Archive screenshot image
          uses: actions/upload-artifact@v4
          with:
            name: screenshots
            retention-days: 5
            path: |
              AxonIvyPortal/portal-selenium-test/target/selenide/reports/*

        - name: Archive test reports
          uses: actions/upload-artifact@v4
          with:
            name: selenium-test-reports
            retention-days: 5
            path: |
              AxonIvyPortal/portal-selenium-test/target/surefire-reports/*

        - name: Show inputs
          run: |
            echo "## Inputs" >> $GITHUB_STEP_SUMMARY
            echo "- Test pattern: ${{inputs.testPatternToRun}}" >> $GITHUB_STEP_SUMMARY
            echo "- Engine download url: ${{inputs.engineDownloadURL}}" >> $GITHUB_STEP_SUMMARY

        - name: Parse and show failed tests
          if: always()
          uses: actions/github-script@v8
          with:
            script: |
              const fs = require('fs');
              const path = require('path');
              
              try {
                // Find all test result XML files
                const reportsDir = 'AxonIvyPortal/portal-selenium-test/target/surefire-reports';
                let testResultFiles = [];
                
                if (fs.existsSync(reportsDir)) {
                  const files = fs.readdirSync(reportsDir);
                  console.log(`Found files in ${reportsDir}:`, files);
                  testResultFiles = files
                    .filter(file => file.startsWith('TEST-') && file.endsWith('.xml'))
                    .map(file => path.join(reportsDir, file));
                  console.log(`Filtered test result files:`, testResultFiles);
                } else {
                  console.log(`Reports directory does not exist: ${reportsDir}`);
                }
                
                if (testResultFiles.length === 0) {
                  await core.summary
                    .addHeading('🔍 Test Results')
                    .addRaw('No test result files found.')
                    .write();
                  return;
                }
                
                let totalTests = 0;
                let totalFailures = 0;
                let totalErrors = 0;
                let totalSkipped = 0;
                let failedTests = [];
                
                // Parse each XML file
                for (const file of testResultFiles) {
                  try {
                    const content = fs.readFileSync(file, 'utf8');
                    console.log(`Parsing file: ${file}`);
                    
                    // Extract test suite info using more flexible regex
                    const testSuiteMatch = content.match(/<testsuite[^>]*>/);
                    
                    if (testSuiteMatch) {
                      const testSuiteElement = testSuiteMatch[0];
                      
                      // Extract individual attributes more reliably
                      const testsMatch = testSuiteElement.match(/tests="(\d+)"/);
                      const failuresMatch = testSuiteElement.match(/failures="(\d+)"/);
                      const errorsMatch = testSuiteElement.match(/errors="(\d+)"/);
                      const skippedMatch = testSuiteElement.match(/skipped="(\d+)"/);
                      const nameMatch = testSuiteElement.match(/name="([^"]*)"/);
                      const timeMatch = testSuiteElement.match(/time="([^"]*)"/);
                      
                      const tests = testsMatch ? parseInt(testsMatch[1]) : 0;
                      const failures = failuresMatch ? parseInt(failuresMatch[1]) : 0;
                      const errors = errorsMatch ? parseInt(errorsMatch[1]) : 0;
                      const skipped = skippedMatch ? parseInt(skippedMatch[1]) : 0;
                      const suiteName = nameMatch ? nameMatch[1] : 'Unknown Suite';
                      const time = timeMatch ? timeMatch[1] : '0';
                      
                      totalTests += tests;
                      totalFailures += failures;
                      totalErrors += errors;
                      totalSkipped += skipped;
                      
                      console.log(`Suite: ${suiteName}, Tests: ${tests}, Failures: ${failures}, Errors: ${errors}, Skipped: ${skipped}`);
                      console.log(`Testsuite element: ${testSuiteElement}`);
                      
                      // Find failed test cases - try alternative approach
                      console.log(`Looking for failed tests in suite: ${suiteName}`);
                      
                      // Method 1: Simple approach - find all testcase elements and check if they contain failure/error
                      const allTestCases = content.match(/<testcase[^>]*>[\s\S]*?<\/testcase>/g);
                      
                      if (allTestCases) {
                        console.log(`Found ${allTestCases.length} testcase elements`);
                        
                        allTestCases.forEach((testCaseXml, index) => {
                          console.log(`Processing testcase ${index + 1}`);
                          
                          // Extract classname and name from the opening tag
                          const classnameMatch = testCaseXml.match(/classname="([^"]*)"/);
                          const nameMatch = testCaseXml.match(/name="([^"]*)"/);
                          
                          if (classnameMatch && nameMatch) {
                            const className = classnameMatch[1];
                            const testName = nameMatch[1];
                            
                            console.log(`Test: ${className}.${testName}`);
                            
                            // Check if this testcase contains failure or error
                            const hasFailure = testCaseXml.includes('<failure') || testCaseXml.includes('<error');
                            
                            console.log(`Has failure/error: ${hasFailure}`);
                            
                            if (hasFailure) {
                              failedTests.push({
                                suite: suiteName,
                                class: className,
                                test: testName,
                                time: '0',
                                message: 'Test failed'
                              });
                              console.log(`Added failed test: ${className}.${testName}`);
                            }
                          } else {
                            console.log(`Could not extract classname/name from testcase ${index + 1}`);
                          }
                        });
                      } else {
                        console.log('No testcase elements found');
                      }
                    }
                  } catch (parseError) {
                    console.error(`Error parsing ${file}:`, parseError.message);
                  }
                }
                
                // Build summary
                const successCount = totalTests - totalFailures - totalErrors - totalSkipped;
                let summaryText = `## 🧪 Test Results Summary\n\n`;
                
                console.log(`Final totals - Tests: ${totalTests}, Failures: ${totalFailures}, Errors: ${totalErrors}, Skipped: ${totalSkipped}, Success: ${successCount}`);
                console.log(`Failed tests found: ${failedTests.length}`);
                
                if (totalFailures === 0 && totalErrors === 0) {
                  summaryText += `🎉 **All tests passed!**`;
                } else {
                  summaryText += `❌ **Failed Tests (${failedTests.length})**\n\n`;
                  
                  // Group by test class for better organization
                  const groupedFailures = {};
                  failedTests.forEach(test => {
                    const key = test.class;
                    if (!groupedFailures[key]) {
                      groupedFailures[key] = [];
                    }
                    groupedFailures[key].push(test);
                  });
                  
                  summaryText += '```\n';
                  for (const [className, tests] of Object.entries(groupedFailures)) {
                    summaryText += `${className}\n`;
                    summaryText += tests.map(test => `- ${test.test}`).join('\n');
                    summaryText += '\n\n';
                  }
                  summaryText += '```\n';
                }
                
                await core.summary
                  .addRaw(summaryText)
                  .write();
                  
              } catch (error) {
                console.error('Error parsing test results:', error);
                await core.summary
                  .addHeading('🔍 Test Results')
                  .addRaw(`Error parsing test results: ${error.message}`)
                  .write();
              }
        
        - name: Report
          uses: dorny/test-reporter@v2.1.1
          with:
            artifact: selenium-test-reports
            name: Selenium tests
            path: '*.xml'
            reporter: java-junit
            only-summary: 'false'
