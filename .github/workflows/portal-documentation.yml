name: Portal Documentation
run-name: ðŸ“š Portal Documentation on branch ${{ github.ref_name }}
on:
  workflow_dispatch:
    inputs:
      ivyVersion:
        description: 'Ivy version use to replace |version| placeholder of the links which navigate to ivy documentation. e.g.: https://developer.axonivy.com/doc/nightly/designer-guide/configuration/variables.html'
        default: 'nightly'
        required: true
  push:

jobs:
  checkout-source:
    runs-on: portal01
    steps:
      - uses: actions/checkout@v4

  generate-resources:
    needs: [checkout-source]
    runs-on: portal01
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    container:
      image: maven:3.9.8-eclipse-temurin-21
      volumes:
        - ${{ github.workspace }}

    steps:
      - name: Get current version
        id: get_version
        shell: bash
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout -f Documentation/pom.xml)
          if [[ "$VERSION" == "null object or invalid expression" ]]; then
            echo "Error: could not evaluate maven revision property"
            # Stops the workflow if the condition is met
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version is $VERSION"
      - name: Generate resources
        run: |
          mvn clean process-resources "-Divy.engine.version=[13.1.0,]" "-Divy.engine.download.url=https://developer.axonivy.com/permalink/nightly/axonivy-engine.zip" -f Documentation/public-api/pom.xml
          mvn clean generate-resources -f Documentation/pom.xml
  unzip-screenshots:
    runs-on: portal01
    needs: [generate-resources]
    steps:
      - name: Unzip portal screenshots
        run: |
          unzip /mnt/portal02/document-screenshots/portal-document-screenshots-selenide-${{ needs.generate-resources.outputs.version }}.zip \
            -d Documentation/portal-guide/source/screenshots
  
  build-document:
    runs-on: portal01
    needs: [unzip-screenshots, generate-resources]
    container:
      image: axonivy/build-container:read-the-docs-2
      options: -u root:root
      volumes:
        - ${{ github.workspace }}:/workspace
    steps:
      - name: Build Documentation HTML
        run: |
          make -C /doc-build html BASEDIR='/workspace/Documentation/portal-guide' VERSION=-${{ needs.generate-resources.outputs.version }} 2> sphinx-warnings.log
            WARNINGS=$(grep -c "WARNING" sphinx-warnings.log || echo 0)
            echo "Found $WARNINGS warnings."
            if [ "$WARNINGS" -ge 1 ]; then
              echo "Documentation build has warnings. Adding to summary..."
              echo "### Documentation Build Warnings" >> $GITHUB_STEP_SUMMARY
              echo "Found $WARNINGS warnings during the documentation build." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "#### Warning Details" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat sphinx-warnings.log >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              exit 1 
            fi
  
  install-or-deploy:
    runs-on: portal01
    needs: [generate-resources,build-document]
    container:
      image: maven:3.9.8-eclipse-temurin-21
      volumes:
        - ${{ github.workspace }}
    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          server-id: 'nexus.axonivy.com'
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Install or deploy document
        shell: bash
        run: |
          if [[ "${{ needs.generate-resources.outputs.version }}" == *SNAPSHOT* ]]; then
            PHASE="install"
          else
            PHASE="deploy"
          fi
          echo "Running 'clean $PHASE' for version ${{ needs.generate-resources.outputs.version }}"
          mvn clean $PHASE -f Documentation/pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.NEXUS_AXONIVY_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.NEXUS_AXONIVY_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: |
            Documentation/*/target/*.zip
      - name: Clean up
        if: always()
        shell: bash
        run: sudo rm -rf ${{ github.workspace }}/*

  # build-document:
  #   runs-on: portal01
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: master
  #         fetch-depth: 0

  #     - name: Set up Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '21'

  #     - name: Set up Maven
  #       uses: stCarolas/setup-maven@v5
  #       with:
  #         maven-version: 3.9.8

  #     - name: Get current version
  #       id: get_version
  #       run: |
  #         VERSION=$(mvn help:evaluate -Dexpression=revision -q -DforceStdout -f Documentation/pom.xml)
  #         if [[ "$VERSION" == "null object or invalid expression" ]]; then
  #           echo "Error: could not evaluate maven revision property"
  #           # Stops the workflow if the condition is met
  #           exit 1
  #         fi
  #         echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  #         echo "Version is $VERSION"
      
  #     - name: Unzip portal screenshots
  #       run: |
  #         unzip /mnt/portal02/document-screenshots/portal-document-screenshots-selenide-${{ steps.get_version.outputs.version }}.zip \
  #           -d Documentation/portal-guide/source/screenshots

  #     - name: Generate resources
  #       run: |
  #         mvn clean process-resources -Divy.engine.version=[13.1.0,] -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine.zip -f Documentation/public-api/pom.xml
  #         mvn clean generate-resources -f Documentation/pom.xml
      
  #     - name: Run substitute
  #       shell: bash
  #       run: chmod +x Documentation/portal-guide/substitute.sh && Documentation/portal-guide/substitute.sh ${{ inputs.ivyVersion }}

  #     - name: Build Documentation HTML
  #       run: |
  #         docker run -u root:root --rm -v ${{ github.workspace }}:/workspace -w /workspace/Documentation/portal-guide \
  #           axonivy/build-container:read-the-docs-2 make -C /doc-build html BASEDIR='/workspace/Documentation/portal-guide' VERSION=${{ steps.get_version.outputs.version }} 2> sphinx-warnings.log
  #           WARNINGS=$(grep -c "WARNING" sphinx-warnings.log || echo 0)
  #           echo "Found $WARNINGS warnings."
  #           if [ "$WARNINGS" -ge 1 ]; then
  #             echo "Documentation build has warnings. Adding to summary..."
  #             echo "### Documentation Build Warnings" >> $GITHUB_STEP_SUMMARY
  #             echo "Found $WARNINGS warnings during the documentation build." >> $GITHUB_STEP_SUMMARY
  #             echo "" >> $GITHUB_STEP_SUMMARY
  #             echo "#### Warning Details" >> $GITHUB_STEP_SUMMARY
  #             echo '```' >> $GITHUB_STEP_SUMMARY
  #             cat sphinx-warnings.log >> $GITHUB_STEP_SUMMARY
  #             echo '```' >> $GITHUB_STEP_SUMMARY
  #             exit 1
  #           fi

  #     - name: Install or deploy document
  #       run: |
  #         if [[ "${{ steps.get_version.outputs.version }}" == *SNAPSHOT* ]]; then
  #           PHASE="install"
  #         else
  #           PHASE="deploy"
  #         fi
  #         echo "Running 'clean $PHASE' for version ${{ steps.get_version.outputs.version }}"
  #         mvn clean $PHASE -f Documentation/pom.xml

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Documentation
  #         path: |
  #           Documentation/*/target/*.zip

  #     - name: Cleanup
  #       shell: bash
  #       run: sudo rm -rf ${{ github.workspace }}/*
    