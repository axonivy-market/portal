<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="axonivyportal.customization.taskdetails">
	<title>Task widget</title>	
	<para>TaskWidget is a built-in component of Portal which contains the tasks users can interact with.
	In order to show needed task's information, Portal supports overriding concept for TaskWidget. 
	Each TaskWidget contains 2 parts:
	</para>
	<orderedlist>
		<listitem>
			<para><link linkend="axonivyportal.customization.taskwidget.howtooverideui">UI</link>: TaskHeader and TaskListHeader and TaskFilter</para>
		</listitem>
		<listitem>
			<para><link linkend="axonivyportal.customization.taskwidget.howtooverridedataquery">Data query</link>: display the tasks as you want</para>
		</listitem>
	</orderedlist>
	<important>
		<para>
			<orderedlist>
				<listitem>
					<para>Task header customization currently support responsive design. Refer to <link linkend="axonivyportal.customization.taskwidget.responsivelayout">this part</link> for more detail.</para>
				</listitem>
				<listitem>
					<para>Task header's buttons cannot be modified (they stay where they are)</para>
				</listitem>
			</orderedlist>
		</para>
	</important>
	<sect2 xml:id="axonivyportal.customization.taskwidget.howtooverideui">
		<title>How to override task widget's UI</title>
        <para>Refer to <code>PortalExamples</code> project for examples</para>
		<para>
			<orderedlist>
				<listitem>
					<para>
						Introduce an Axon.ivy project which has <code>PortalTemplate</code> as a required library.
					</para>
				</listitem>
				<listitem>
					<para>
						To customize task widget, you must customize Portal Home first. Refer to <link linkend="axonivyportal.customization.portalhome">Customize Portal home</link> to set new home page.
					</para>
				</listitem>
                <listitem>
                  <para>
                    Copy the <code>PortalStart</code> process from <code>PortalTemplate</code> to your project. Point PortalHome element to your custom home page in previous step. This process is new home page and administrator should register this link by Portal's Admin Settings.  
                  </para>
                </listitem>
				<listitem>
					<para>
						Override Task widget in: TaskList page, Task Search result.
						<itemizedlist>
							<listitem>
								<para>
									Introduce a new HTMLDialog which uses template <code>/layouts/PortalTasksTemplate.xhtml</code> (refer to <link linkend="axonivyportal.components.layouttemplates.reponsiveness">Responsiveness</link> to override responsiveness). You can take a look at <code>PortalTasks.xhtml</code> to see how to customize it.
									<tip>
										<para>Highly recommend to copy the <code>PortalTasks</code> HTMLDialog in PortalTemplate and change the copied one's view.</para>
									</tip>
								</para>
							</listitem>
							<listitem>
								Use Axon.ivy Override to override the <code>OpenPortalTasks</code> callable. The original implementation of this callable is calling <code>PortalTasks</code>, change it to call the customized Page introduced in the step above. The signature of this callable is <code>useView(TaskView)</code> and customized page must receive this <code>TaskView</code> instance, put in the dialog's <code>Data</code> with the exact name <code>taskView</code>.
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>
						After previous steps, you can override <link linkend="axonivyportal.customization.taskwidget.howtooverideui.taskheader">TaskListHeader and TaskHeader</link> and <link linkend="axonivyportal.customization.taskwidget.howtooverideui.taskfilter">TaskFilter</link>
					</para>
				</listitem>
			</orderedlist>
			<sect3 xml:id="axonivyportal.customization.taskwidget.howtooverideui.taskheader">
				<title>Task List Header and Task header</title>
				<para>
					Refer to the <code>taskListHeader</code> and <code>taskHeader</code> sections in <code>PortalTasks.xhtml</code> of PortalTemplate. In case your task widget has new columns, you should override TaskLazyDataModel to make the sort function of these columns work:
					<itemizedlist>
						<mediaobject>
								<imageobject>
										<imagedata fileref="images/TaskWidget/TaskList.png" />
								</imageobject>
						</mediaobject>
						<listitem>
							<para>Introduce a java class extends TaskLazyDataModel</para>
						</listitem>
						<listitem>
							<para>Override the <code>extendSort</code> method and extend the sort function for the added columns (see the method's Javadoc comments)</para>
						</listitem>
						<listitem>
							<para>Default taskList supports user to config display/hide column
								<mediaobject>
									<imageobject>
										<imagedata fileref="images/TaskWidget/TaskColumnsConfiguration.png" />
									</imageobject>
								</mediaobject>
								<para>
									<itemizedlist>
										<listitem>
											<para>In case you have new columns, override method <code>getDefaultColumns</code> of the extended class from TaskLazyDataModel to display checkboxes in Config columns panel and display/hide sortFields (see the methods' Javadoc comments)</para>
										</listitem>
										<listitem>
											<para>To add cms for checkboxes's label, add new entries to folder <code>/ch.ivy.addon.portalkit.ui.jsf/taskList/defaultColumns/</code> in <code>PortalStyle</code> or override method <code>getColumnLabel</code>(see the methods' Javadoc comments)</para>
										</listitem>
                                        <listitem>
                                            <para>In <code>taskListHeader</code> section, use <code>TaskColumnHeader</code> component</para>
                                        </listitem>
										<listitem>
											<para>In <code>taskHeader</code> section, use <code>TaskCustomField</code> component for each additional columns. This component will handle display/hide new columns on task list.</para>
                                            <para>Currently, TaskCustomField only supports text field. If you want to create your own component, remember to add rendered="#{taskView.dataModel.isSelectedColumn('YOUR_CUSTOM_COLUMN')}" </para>
											<para>
												For example: Show custom field <code>customer name</code> which stored in <code>task.customVarCharField5</code>
												<para>
													<code>&lt;ic:ch.ivy.addon.portalkit.component.task.column.TaskCustomField id="customer-name-component" componentId="customer-name" column="customVarCharField5" dataModel="#{taskView.dataModel}" labelValue="#{task.customVarCharField5}" /&gt;</code>
												</para>
											</para>
										</listitem>
									</itemizedlist>
								</para>
							</para>
						</listitem>
						<listitem>
							<para>Use Axon.ivy Override to override the <code>InitializeTaskDataModel</code> callable and initialize data model by your customized one.</para>
						</listitem>
						<listitem>
							<para>In your customized portal tasks HTMLDialog, the customized data model should be passed as a parameter to components (refer to <code>PortalTasks.xhtml</code>).</para>
						</listitem>
					</itemizedlist>
				</para>
			</sect3>
			<sect3 xml:id="axonivyportal.customization.taskwidget.howtooverideui.taskfilter">
				<title>Task filter</title>
				<itemizedlist>
					<listitem>
						<para>Refer to the <code>taskFilter</code> section in <code>PortalTasks.xhtml</code> of PortalTemplate.</para>
					</listitem>
					<listitem>
						<para>In order to introduce new filter, create a new java class extends TaskFilter and override its methods (see javadoc comments)</para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/TaskWidget/TaskFilter.png" />
							</imageobject>
						</mediaobject>
					</listitem>
					<listitem>
						<para>Introduce a java class extends TaskFilterContainer. This filter container contains your filters, you can reuse default filters, refer to <code>DefaultTaskFilterContainer.java</code></para>
						<tip><para>StateFilter is added as default to container. If you don't need it, use this code in constructor: <code>filters.remove(stateFilter);</code></para></tip>
					</listitem>
					<listitem>
						<para>Introduce a java class extends TaskLazyDataModel. Override the <code>initFilterContainer</code> method and initialize filter container (see javadoc comments)</para>
					</listitem>
					<listitem>
						<para>Use Axon.ivy Override to override the <code>InitializeTaskDataModel</code> callable and initialize data model by your customized one.</para>
					</listitem>
					<listitem>
						<para>In your customized portal tasks HTMLDialog, the customized data model and filter container should be passed as parameters to components (refer to <code>PortalTasks.xhtml</code>).</para>
					</listitem>
					<listitem>
                        <para><emphasis role="strong">Advanced usage:</emphasis> Portal supports storing/restoring filters. Your filter class (extends <code>TaskFilter</code>) is stored in business data.
                            Properties stored user input values should be persisted, properties controlled logic should not be persisted to reduce persisted data size in business data.
                            Use annotation <code>@JsonIgnore</code> to exclude properties.
                            By default, Portal takes care storing/restoring filters. If you want to customize storing/restoring filter data, do it in your data model class (extends <code>TaskLazyDataModel</code> class).</para>
						<para>By default, filters are stored/restored in process model level. You can change this by setting the ui:param <code>filterGroupId</code> in <code>PortalTasks.xhtml</code> to a new Long value.
							<tip>
								<para>If you have multiple case lists in your project, you may want to set <code>filterGroupId</code> to an unique identifier for each of your <code>PortalTasks.xhtml across your projects</code></para>
							</tip> 
						</para>
					</listitem>
				</itemizedlist>
			</sect3>
		</para>
	</sect2>
	<sect2 xml:id="axonivyportal.customization.taskwidget.howtooverridedataquery">
		<title xml:id="axonivyportal.customization.taskwidget.howtooverridedataquery.title">How to override task widget's data query</title>
		<itemizedlist>
			<listitem>
				Override the <code>BuildTaskQuery</code> callable process of PortalKit and build your own query to effect the data of task widget, task categories and statistic widget.
			</listitem>
			<listitem>
				If you want to apply a query for only Home page task list, not for Full mode task list, 
				use attribute <code>isQueryForHomePage</code> in <code>BuildTaskQuery</code> callable process to specify the query for Home page task list, e.g.
				<para>
<screen>
if (in.isQueryForHomePage) { // in home page
	in.taskQuery = TaskQuery.create().where().activatorUserId().isNotNull();
}
</screen>
				</para>
			</listitem>
			<listitem>
				Apply the following steps in case you would like to provide data for task list after navigating to task list from your page, e.g. clicking on a bar chart then opening the tasks of that bar:
				<itemizedlist>
					<listitem>
						<para>Use the <code>OpenPortalTasks</code> callable process with the <code>TaskView</code> parameter. It is used to define which information are displayed in TaskWidget.</para>
					</listitem>
					<listitem>
						<para>Refer to TaskView, TaskSearchCriteria to build your TaskView</para>
					</listitem>
				</itemizedlist>
<screen>
TaskLazyDataModel dataModel = new TaskLazyDataModel();
// Set your TaskQuery
dataModel.getCriteria().setCustomTaskQuery(YOUR_TASK_QUERY); 
// Display the tasks of all users
dataModel.getCriteria().setAdminQuery(true); 
out.taskView = TaskView.create().dataModel(dataModel)
.showHeaderToolbar(false).createNewTaskView();
</screen>
			</listitem>
		</itemizedlist>
	</sect2>
	<sect2 xml:id="axonivyportal.customization.taskwidget.customtaskdelegate">
		<title>Custom task delegate</title>
		<para>
			Portal allows to customize the list of users and roles that a task can be delegated to. This can be done following these steps:
		</para>
		<orderedlist>
			<listitem>
				<para>Introduce a Axon.ivy project which has <code>PortalTemplate</code> as a required library and its own <code>PortalStart</code> process. Refer to step 1, 2, 3, 4 in <link linkend="axonivyportal.customization.taskwidget.howtooverideui">override task widget's UI</link> guide.</para>
			</listitem>
			<listitem>
				<para>In your project, override the callable subprocess <code>CalculateTaskDelegate</code></para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/TaskWidget/CalculateTaskDelegate.png" />
					</imageobject>
				</mediaobject>
			</listitem>
			<listitem>
				<para>The callable subprocess data contains the current user <code>in.currentUser</code> and the current task to be delegated <code>in.task</code>. The lists <code>in.users</code> and <code>in.roles</code> contain all possible users and roles that the task can be delegated to. Modify those two to have your own delegate list.</para> 
			</listitem>
		</orderedlist>
	</sect2>
	<sect2 xml:id="axonivyportal.customization.taskwidget.responsivelayout">
		<title>How to make reponsive task list</title>
		<para>If you have customized task list and want it responsive on different screen sizes, please follow below steps.</para>
		<para>You can refer to <code>PortalExamples</code> project for examples</para>
		<orderedlist>
			<listitem>
				<para>Add responsiveStyleClass param (in case you're using Portal component), or styleClass (in case you're using Primefaces or JSF component) with the same responsive css class for both taskListHeader and taskHeader. 
				You can find responsive class in <link linkend="axonivyportal.customization.responsivecss">this part.</link></para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/TaskWidget/ResponsiveTaskListCustomization.png" />
					</imageobject>
				</mediaobject>
				<tip>
					<para>Hint: <code>TaskCustomField</code> component has default responsiveStyleClass is <code>u-hidden-sm-down</code></para>
				</tip>
			</listitem>
			<listitem>
				<para>
				Responsiveness could be broken when you anchor left menu. In this case, to maintain the responsiveness, you could hide some columns by add <code>js-hidden-when-expand-menu</code>
				to responsiveStyleClass or styleClass param of taskListHeader and taskHeader.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/TaskWidget/ResponsiveTaskListHideColumn.png" />
					</imageobject>
				</mediaobject>
				<tip>
					<para>Hint: The smallest browser width you can anchor the left menu is 1025. So you could reduce width of browser to 1025 to test and decide which columns need to be hidden.</para>
				</tip>
			</listitem>
		</orderedlist>
	</sect2>
</sect1>
