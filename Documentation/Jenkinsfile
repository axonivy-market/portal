pipeline {
  agent {
    label 'docker'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '2'))
  }

  triggers {
    pollSCM 'H/10 * * * *'
    cron '@midnight'
  }

  stages {
    stage('build') {
      steps {
        script {
          def version = 'dev'
          docker.withRegistry('', 'docker.io') {
            docker.image('maven:3.6.3-jdk-11-slim').inside {
              version = getCurrentVersion()
              maven cmd: 'clean process-resources -Divy.engine.download.url=https://developer.axonivy.com/permalink/9.2.0/axonivy-engine-windows.zip -f Documentation/public-api/pom.xml'
              maven cmd: 'clean generate-resources -f Documentation/pom.xml'
            }
            
            docker.image('axonivy/build-container:read-the-docs-2').inside {
              sh "make -C /doc-build html BASEDIR='${env.WORKSPACE}/Documentation/portal-guide' VERSION=${version}"
            }

            docker.image('maven:3.6.3-jdk-11-slim').inside {
              def phase = env.BRANCH_NAME == 'master' ? 'deploy' : 'install'
              maven cmd: "clean ${phase} -f Documentation/pom.xml"
            }
          }
        }
        archiveArtifacts 'Documentation/*/build/html/**/*, Documentation/*/target/*.zip'
        recordIssues tools: [sphinxBuild()], unstableTotalAll: 1
      }
    }
  }
}

def getCurrentVersion() {
  def cmd = 'mvn help:evaluate -Dexpression=revision -q -DforceStdout -f Documentation/pom.xml'
  def value = sh (script: cmd, returnStdout: true)
  echo "version is $value"
  if (value == 'null object or invalid expression') {
    throw new Exception('could not evaluate maven revision property');
  }
  return value
}
