pipeline {
  agent {
    label 'linux'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '2'))
  }

  triggers {
    cron '@midnight'
  }

  parameters {
      string(name: 'ivyVersion', defaultValue: 'nightly', description: 'Ivy version use to replace |version| placeholder of the links which navigate to ivy documentation. e.g.: https://developer.axonivy.com/doc/nightly/designer-guide/configuration/variables.html')
  }

  stages {
    stage('build') {
      steps {
        script {
          currentBuild.description = "On ${env.NODE_NAME}"
          def version = 'dev'
          docker.withRegistry('', 'docker.io') {
            docker.image('maven:3.9.8-eclipse-temurin-21').inside('-u root:root') {
              version = getCurrentVersion()
            }
            sh "unzip /mnt/portal02/document-screenshots/portal-document-screenshots-selenide-${version}.zip -d Documentation/portal-guide/source/screenshots"
            docker.image('maven:3.9.8-eclipse-temurin-21').inside('-u root:root') {
              maven cmd: 'clean process-resources -Divy.engine.version=[11.1.0,] -Divy.engine.download.url=https://developer.axonivy.com/permalink/dev/axonivy-engine.zip -f Documentation/public-api/pom.xml'
              maven cmd: 'clean generate-resources -f Documentation/pom.xml'
            }
            sh "chmod +x Documentation/portal-guide/substitute.sh && Documentation/portal-guide/substitute.sh ${params.ivyVersion}"
            docker.image('axonivy/build-container:read-the-docs-2').inside('-u root:root') {
              sh "make -C /doc-build html BASEDIR='${env.WORKSPACE}/Documentation/portal-guide' VERSION=${version}"
            }

            docker.image('maven:3.9.8-eclipse-temurin-21').inside('-u root:root') {
              def phase = version.contains('SNAPSHOT') ? 'install' : 'deploy'
              maven cmd: "clean ${phase} -f Documentation/pom.xml"
            }
          }
        }
        archiveArtifacts 'Documentation/*/build/html/**/*, Documentation/*/target/*.zip'
        recordIssues tools: [sphinxBuild()], unstableTotalAll: 1
      }
    }
  }
  post {
    always {
      cleanWs()
    }
  }
}

def getCurrentVersion() {
  def cmd = 'mvn help:evaluate -Dexpression=revision -q -DforceStdout -f Documentation/pom.xml'
  def value = sh (script: cmd, returnStdout: true)
  echo "version is $value"
  if (value == 'null object or invalid expression') {
    throw new Exception('could not evaluate maven revision property');
  }
  return value
}
