<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="axonivyportal.customization.casewidget">
	<title>Case widget</title>
	<para>CaseWidget is a built-in component of Portal which contains cases users can interact with.
	In order to show needed case's information, Portal supports overriding concept for CaseItem (inside CaseWidget). 
	Each CaseItem contains two part: <code>CaseHeader</code> and <code>CaseBody</code>.
	</para>
	<important>
		<para><code>CaseHeader</code> area is not supported to override yet.</para>
	</important>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/CaseItem/CaseItem.png" />
		</imageobject>
	</mediaobject>
	<sect2 xml:id="axonivyportal.customization.casewidget.howtooverridecaseitem">
		<title xml:id="axonivyportal.customization.casewidget.howtooverridecaseitem.title">How to override case item</title>
		<orderedlist>
			<listitem>
				<para>
					Introduce an Axon Ivy project which has <code>PortalTemplate</code> as a required library.
				</para>
			</listitem>
			<listitem>
				<para>
					Copy the <code>PortalStart</code> process from <code>PortalTemplate</code> to your project.
				</para>
			</listitem>
			<listitem>
				<para>
					Introduce a new HtmlDialog Page which uses the template <code>/layouts/PortalCasesTemplate.xhtml</code> (refer to <link linkend="axonivyportal.components.layouttemplates.reponsiveness">Responsiveness</link> to override responsiveness). The <code>PortalCasesTemplate</code> is 
					designed such that it will insert the content between its predefined place holder. <code>Put your customized content in there</code>. There is a placeholder named: 
					<code>caseBody</code>. The effect only takes place when the <code>ui:param</code> named <code>useOverrideBody</code> is set to <code>true</code>. Clients can set this parameter to a value expression for flexibility. For example:
					<para>
						<code>&lt;ui:composition template="/layouts/PortalCasesTemplate.xhtml"&gt;</code>
					</para>
					<para>
						<code>&lt;ui:param name="useOverrideBody" value="#{not case.getCustomVarCharField1().isEmpty()}" /&gt;</code>
					</para>
					<para>
						<code>&lt;ui:define name="caseBody"&gt;</code>
					</para>
					<para>
						<code>This is the customized content of the case: #{case.getId()}</code>
					</para>
					<para>
						<code>&lt;ui:fragment rendered="#{case.getCustomVarCharField1().equals('I am a secret')}"&gt;</code>
					</para>
					<para>
						<code>&lt;h:outputText value="I'm a secret case so I'm displayed differently" /&gt;</code>
					</para>
					<para>
						<code>&lt;/ui:fragment&gt;</code>
					</para>
					<para>
						<code>&lt;ui:fragment rendered="#{case.getCustomVarCharField1().equals('I am even more secret')}"&gt;</code>
					</para>
					<para>
						<code>&lt;!-- Put your secret content here --&gt;</code>
					</para>
					<para>
						<code>&lt;/ui:fragment&gt;</code>
					</para>
					<para>
						<code>&lt;/ui:define&gt;</code>
					</para>
					<para>
						<code>&lt;/ui:composition&gt;</code>
					</para>
				</para>
			</listitem>
			<listitem>
				<para>
					If you need to apply the responsiveness behavior of Portal, there are 2 components which can be used: <code>ResponsivenessHandleContainer</code> and <code>ResponsivenessHandleButton</code>:
					<itemizedlist>
						<listitem>
							<para>
								ResponsivenessHandleContainer: a container contains <code>ResponsivenessHandleButton</code> and your javascript which contains the onstart and oncomplete function of <code>ResponsivenessHandleButton</code>.
							</para>
						</listitem>
						<listitem>
							<para>
								ResponsivenessHandleButton: contains the params which handle responsiveness:
								<para>
									<itemizedlist>
										<listitem>
											<para>
												icon: the icon of button
											</para>
										</listitem>
										<listitem>
											<para>
												displayedSelectors: css selectors of the components which need to be displayed.
											</para>
										</listitem>
										<listitem>
											<para>
												hiddenSelectorsInLargeScreen: css selectors of the components which need to be hidden in large screen (width: 1920px).
											</para>
										</listitem>
										<listitem>
											<para>
												hiddenSelectorsInMediumScreen: css selectors of the components which need to be displayed in medium screen (width: 1366px).
											</para>
										</listitem>
										<listitem>
											<para>
												hiddenSelectorsInSmallScreen: css selectors of the components which need to be displayed in small screen (width: 1024px).
											</para>
										</listitem>
										<listitem>
											<para>
												fadeTime: the fade in/out time. (metric: millisecond)
											</para>
										</listitem>
										<listitem>
											<para>
												onstart: client side callback to execute before responsiveness execution.
											</para>
										</listitem>
										<listitem>
											<para>
												oncomplete: client side callback to execute after responsiveness execution.
											</para>
										</listitem>
									</itemizedlist>
								</para> 
							</para>
						</listitem>
					</itemizedlist>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/CaseItem/CaseDetailsResponsiveness.png" />
						</imageobject>
					</mediaobject>
				</para>
			</listitem>
			<listitem>
				<para>
					Use Axon Ivy Override to override the <code>OpenPortalCases</code> callable . The original implementation is calling <code>PortalCases</code>, change it to call the Page introduced in the step above. The signature of this callable is <code>useView(CaseView)</code> and your customized Page must receive this <code>CaseView</code> instance, put in the dialog's <code>Data</code> with the exact name <code>caseView</code>.
				</para>
			</listitem>
			<listitem>
				<para>
					Introduce a Business Process which starts the page <code>PortalHome</code>. To make the overriding take effect, the client must use this process to start <code>Portal</code> (instead of the original one on <code>PortalTemplate</code>). Remember to set the home page variable to the new home page url (see <link linkend="axonivyportal.customization.portalhome" endterm="axonivyportal.customization.portalhome.title" /> for more details).
				</para>
			</listitem>
			<listitem>
				<para>
					In case you want to use the <code>CaseTempate</code> template, you may want to define the <code>caseStatusTab</code> with your customized content. For example:
					<para>
						<para>
							<code>&lt;ui:composition template="/layouts/CaseTemplate.xhtml"&gt;</code>
						</para>
						<para>
							<code>&lt;ui:define name="caseStatusTab"&gt;</code>
						</para>
						<para>
							<code>This is the customized content of the case: #{caseId}</code>
						</para>
						<para>
							<code>&lt;/ui:define&gt;</code>
						</para>
						<para>
							<code>&lt;/ui:composition&gt;</code>
						</para>
					</para>
				</para>
			</listitem>
		</orderedlist>
	</sect2>
	<sect2 xml:id="axonivyportal.customization.casewidget.howtooverridedataquery">
		<title xml:id="axonivyportal.customization.casewidget.howtooverridedataquery.title">How to override case widget's data query</title>
		<para>
			Override the <code>BuildCaseJsonQuery</code> callable process of PortalKit and build your own query to effect the data of case widget.
		</para>
		<para>
			Apply the following steps in case you would like to provide data for case list after navigating to case list from your page:
			<itemizedlist>
				<listitem>
					<para>Use the <code>OpenPortalCases</code> callable process with the <code>CaseView</code> parameter. It is used to define which information are displayed in CaseWidget.</para>
				</listitem>
				<listitem>
					<para>Refer to CaseView, CaseSearchCriteria, CaseQueryCriteria to build your CaseView</para>
				</listitem>
			</itemizedlist>
<screen>
CaseLazyDataModel dataModel = new CaseLazyDataModel();
// Set your CaseQuery
dataModel.getQueryCriteria().setCaseQuery(YOUR_CASE_QUERY); 
// Use this code line if you would like to display the cases for all users
dataModel.getSearchCriteria().setInvolvedUsername(true); 
out.caseView = CaseView.create().dataModel(dataModel)
.withTitle("My Cases").buildNewView();
</screen>
		</para>
	</sect2>
	<sect2 xml:id="axonivyportal.customization.casewidget.howtooverridecasefilter">
		<title xml:id="axonivyportal.customization.casewidget.howtooverridecasefilter.title">Case filter</title>
		<itemizedlist>
			<listitem>
				<para>Refer to the <code>caseFilter</code> section in <code>PortalCases.xhtml</code> of PortalTemplate.</para>
			</listitem>
			<listitem>
				<para>In order to introduce new filter, create a new java class extends CaseFilter and override its methods (see javadoc comments)</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/CaseItem/CaseFilter.png" />
					</imageobject>
				</mediaobject>
			</listitem>
			<listitem>
				<para>Introduce a java class extends CaseFilterContainer. This filter container contains your filters, you can reuse default filters, refer to <code>DefaultCaseFilterContainer.java</code></para>
				<tip><para>StateFilter is added as default to container. If you don't need it, use this code in constructor: <code>filters.remove(stateFilter);</code></para></tip>
			</listitem>
			<listitem>
				<para>Introduce a java class extends CaseLazyDataModel. Override the <code>initFilterContainer</code> method and initialize filter container (see javadoc comments)</para>
			</listitem>
			<listitem>
				<para>Use Axon Ivy Override to override the <code>InitializeCaseDataModel</code> callable and initialize data model by your customized one.</para>
			</listitem>
			<listitem>
				<para>In your customized portal cases HTMLDialog, the customized data model and filter container should be passed as parameters to components (refer to <code>PortalCases.xhtml</code>).</para>
			</listitem>
					<listitem>
						<para>Portal supports storing/restoring filters. Your filter class (extends <code>CaseFilter</code>) is stored in business data.
							Properties stored user input values should be persisted, properties controlled logic should not be persisted to reduce persisted data size in business data.
							Use annotation <code>@JsonIgnore</code> to exclude properties.
							By default, Portal takes care storing/restoring filters. If you want to customize storing/restoring filter data, do it in your data model class (extends <code>CaseLazyDataModel</code> class).</para>
					</listitem>
					<listitem>
						<para>By default, filters are stored/restored in process model level. You can change this by setting the ui:param <code>filterGroupId</code> in <code>PortalCases.xhtml</code> to a new Long value.
							<tip>
								<para>If you have multiple task lists in your project, you may want to set <code>filterGroupId</code> to an unique identifier for each of your <code>PortalCases.xhtml across your projects</code></para>
							</tip> 
						</para>
					</listitem>
		</itemizedlist>
	</sect2>
</sect1>
