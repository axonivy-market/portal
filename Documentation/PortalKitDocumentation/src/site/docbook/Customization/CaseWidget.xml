<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="axonivyportal.customization.casewidget">
	<title>Case widget</title>
	<para>CaseWidget is a built-in component of Portal which contains the cases which users can interact with.
		In order to show needed case's information, Portal supports overriding concept for
		CaseWidget.
		Each CaseWidget contains 2 parts:
	</para>
	<orderedlist>
		<listitem>
			<para>
				<link linkend="axonivyportal.customization.casewidget.howtooverideui">UI</link>
				: CaseListHeader, CaseHeader, CaseBody and CaseFilter
			</para>
		</listitem>
		<listitem>
			<para>
				<link linkend="axonivyportal.customization.casewidget.howtooverridedataquery">Data query</link>
				: display the cases as you want by modifying data query
			</para>
		</listitem>
	</orderedlist>
	<important>
		<para>
			<orderedlist>
				<listitem>
					<para>Case header customization does not support responsive design, smaller resolutions (iPad, etc.)</para>
				</listitem>
				<listitem>
					<para>Additional properties cannot be displayed right now as a column</para>
				</listitem>
				<listitem>
					<para>Case header's buttons cannot be modified (they stay where they are)</para>
				</listitem>
			</orderedlist>
		</para>
	</important>
	<sect2 xml:id="axonivyportal.customization.casewidget.howtooverideui">
		<title>How to override case widget's UI</title>
		<para>
			Refer to <code>PortalExamples</code> project for examples
		</para>
		<para>
			<orderedlist>
				<listitem>
					<para>
						Introduce an Axon.ivy project which has <code>PortalTemplate</code> as a required library.
					</para>
				</listitem>
				<listitem>
					<para>
						To customize case widget, you must customize Portal Home first. Refer to <link linkend="axonivyportal.customization.portalhome">Customize Portal home</link> to set new home page.
					</para>
				</listitem>
				<listitem>
					<para>
						Copy the <code>PortalStart</code> process from <code>PortalTemplate</code> to your project. Point PortalHome element to your custom home page in previous step. This process is new home page and administrator should register this link by Portal's Admin Settings.
					</para>
				</listitem>
				<listitem>
					<para>
						Override Case widget in: CaseList page, Case Search result.
						<itemizedlist>
							<listitem>
								<para>
									Introduce a new HTMLDialog which uses template <code>/layouts/PortalCasesTemplate.xhtml</code> (refer to <link linkend="axonivyportal.components.layouttemplates.reponsiveness">Responsiveness</link> to override responsiveness). You can take a look at <code>PortalCases.xhtml</code> to see how to customize it.
									<tip>
										<para>
											Highly recommend to copy the <code>PortalCases</code> HTMLDialog in PortalTemplate and change the copied one's view.
										</para>
									</tip>
								</para>
							</listitem>
							<listitem>
								Use Axon.ivy Override to override the <code>OpenPortalCases</code> callable. The original implementation of this callable is calling <code>PortalCases</code>, change it to call the customized Page introduced in the step above. The signature of this callable is
								<code>useView(CaseView)</code> and customized page must receive this <code>CaseView</code> instance, put in the dialog's <code>Data</code> with the exact name <code>caseView</code>.
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>
						After previous steps, you can override
						<link linkend="axonivyportal.customization.casewidget.howtooverideui.caseheader">CaseHeader and CaseListHeader</link>
						and <link linkend="axonivyportal.customization.casewidget.howtooverideui.casebody">CaseBody</link>
						and <link linkend="axonivyportal.customization.casewidget.howtooverideui.casefilter">CaseFilter</link>
					</para>
				</listitem>
			</orderedlist>
			<sect3 xml:id="axonivyportal.customization.casewidget.howtooverideui.caseheader">
				<title>Case List Header and Case Header</title>
				<para>
					Refer to the <code>caseListHeader</code> and <code>caseHeader</code> sections in <code>PortalCases.xhtml</code> of PortalTemplate. 
					In case your case widget has new columns, you should override CaseLazyDataModel to make the sort function of these columns work:
					<itemizedlist>
						<listitem>
							<para>Introduce a java class extends CaseLazyDataModel</para>
						</listitem>
						<listitem>
							<para>
								Override the <code>extendSort</code> method, the <code>extendSortCasesInNotDisplayedCaseMap</code> method and extend the sort function for the added columns (see the methods' Javadoc comments)
							</para>
						</listitem>
						<listitem>
							<para>Default caseList supports user to config display/hide column
								<mediaobject>
									<imageobject>
										<imagedata fileref="images/CaseWidget/CaseColumnsConfiguration.png" />
									</imageobject>
								</mediaobject>
								<para>
									<itemizedlist>
										<listitem>
											<para>In case you have new columns, override method <code>getDefaultColumns</code> of the extended class from CaseLazyDataModel to display checkboxes in Config columns panel and display/hide sortFields (see the methods' Javadoc comments)</para>
										</listitem>
										<listitem>
											<para>To add cms for checkboxes's label, add new entries to folder <code>/ch.ivy.addon.portalkit.ui.jsf/caseList/defaultColumns/</code> in <code>PortalStyle</code> or override method <code>getColumnLabel</code>(see the methods' Javadoc comments)</para>
										</listitem>
                                        <listitem>
                                            <para>In <code>caseListHeader</code> section, use <code>CaseColumnHeader</code> component</para>
                                        </listitem>
										<listitem>
											<para>In <code>caseHeader</code> section, use <code>CaseCustomField</code> component for each additional column. This component will handle display/hide new columns on case list.</para>
                                            <para>Currently, CaseCustomField only supports text field. If you want to create your own component, remember to add <code>rendered="#{caseView.dataModel.isSelectedColumn('YOUR_CUSTOM_COLUMN')}"</code></para>
											<para>
												For example: Show custom field <code>customer name</code> which stored in <code>case.customVarCharField1</code>
												<para>
													<code>&lt;ic:ch.ivy.addon.portalkit.component.cases.column.CaseCustomField id="case-customer-name-component" panelGroupId="customVarCharField1-column-case-header-panel" componentId="customVarCharField1-column-case-header-text" column="customVarCharField1" dataModel="#{caseView.dataModel}" labelValue="#{case.customVarCharField1}" /&gt;</code>
												</para>
											</para>
										</listitem>
									</itemizedlist>
								</para>
							</para>
						</listitem>
						<listitem>
							<para>
								Use Axon.ivy Override to override the <code>InitializeCaseDataModel</code> callable and initialize data model by your customized one.
							</para>
						</listitem>
						<listitem>
							<para>
								In your customized portal cases HTMLDialog, the customized data model should be passed as a parameter to components (refer to <code>PortalCases.xhtml</code>).
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</sect3>
			<sect3 xml:id="axonivyportal.customization.casewidget.howtooverideui.casebody">
				<title>Case body</title>
				<para>
					Refer to the <code>caseBody</code> section in <code>PortalCases.xhtml</code> of PortalTemplate.
				</para>
				<para>
					If you need to apply the responsiveness behavior of Portal for case details, there are 2 components which can be used: <code>ResponsivenessHandleContainer</code> and <code>ResponsivenessHandleButton</code>:
					<itemizedlist>
						<listitem>
							<para>
								ResponsivenessHandleContainer: a container contains <code>ResponsivenessHandleButton</code> and your javascript which contains the onstart and oncomplete function of <code>ResponsivenessHandleButton</code>.
							</para>
						</listitem>
						<listitem>
							<para>
								ResponsivenessHandleButton: contains the params which handle responsiveness:
								<para>
									<itemizedlist>
										<listitem>
											<para>
												icon: the icon of button
											</para>
										</listitem>
										<listitem>
											<para>
												displayedSelectors: css selectors of the components which need to be displayed.
											</para>
										</listitem>
										<listitem>
											<para>
												hiddenSelectorsInLargeScreen: css selectors of the components which need to be hidden in large screen (width: 1920px).
											</para>
										</listitem>
										<listitem>
											<para>
												hiddenSelectorsInMediumScreen: css selectors of the components which need to be displayed in medium screen (width: 1366px).
											</para>
										</listitem>
										<listitem>
											<para>
												hiddenSelectorsInSmallScreen: css selectors of the components which need to be displayed in small screen (width: 1024px).
											</para>
										</listitem>
										<listitem>
											<para>
												fadeTime: the fade in/out time. (metric: millisecond)
											</para>
										</listitem>
										<listitem>
											<para>
												onstart: client side callback to execute before responsiveness execution.
											</para>
										</listitem>
										<listitem>
											<para>
												oncomplete: client side callback to execute after responsiveness execution.
											</para>
										</listitem>
									</itemizedlist>
								</para>
							</para>
						</listitem>
					</itemizedlist>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/CaseWidget/CaseDetailsResponsiveness.png" />
						</imageobject>
					</mediaobject>
				</para>
			</sect3>
			<sect3 xml:id="axonivyportal.customization.casewidget.howtooverridecasefilter">
				<title xml:id="axonivyportal.customization.casewidget.howtooverridecasefilter.title">Case filter</title>
				<itemizedlist>
					<listitem>
						<para>Refer to the <code>caseFilter</code> section in <code>PortalCases.xhtml</code> of PortalTemplate.</para>
					</listitem>
					<listitem>
						<para>In order to introduce new filter, create a new java class extends CaseFilter and override its methods (see javadoc comments)</para>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/CaseWidget/CaseFilter.png" />
							</imageobject>
						</mediaobject>
					</listitem>
					<listitem>
						<para>Introduce a java class extends CaseFilterContainer. This filter container contains your filters, you can reuse default filters, refer to <code>DefaultCaseFilterContainer.java</code></para>
						<tip><para>StateFilter is added as default to container. If you don't need it, use this code in constructor: <code>filters.remove(stateFilter);</code></para></tip>
					</listitem>
					<listitem>
						<para>Introduce a java class extends CaseLazyDataModel. Override the <code>initFilterContainer</code> method and initialize filter container (see javadoc comments)</para>
					</listitem>
					<listitem>
						<para>Use Axon.ivy Override to override the <code>InitializeCaseDataModel</code> callable and initialize data model by your customized one.</para>
					</listitem>
					<listitem>
						<para>In your customized portal cases HTMLDialog, the customized data model and filter container should be passed as parameters to components (refer to <code>PortalCases.xhtml</code>).</para>
					</listitem>
							<listitem>
								<para>Portal supports storing/restoring filters. Your filter class (extends <code>CaseFilter</code>) is stored in business data.
									Properties stored user input values should be persisted, properties controlled logic should not be persisted to reduce persisted data size in business data.
									Use annotation <code>@JsonIgnore</code> to exclude properties.
									By default, Portal takes care storing/restoring filters. If you want to customize storing/restoring filter data, do it in your data model class (extends <code>CaseLazyDataModel</code> class).</para>
							</listitem>
							<listitem>
								<para>By default, filters are stored/restored in process model level. You can change this by setting the ui:param <code>filterGroupId</code> in <code>PortalCases.xhtml</code> to a new Long value.
									<tip>
										<para>If you have multiple case lists in your project, you may want to set <code>filterGroupId</code> to an unique identifier for each of your <code>PortalCases.xhtml</code> across your projects</para>
									</tip> 
								</para>
							</listitem>
				</itemizedlist>
			</sect3>
		</para>
	</sect2>
	<sect2 xml:id="axonivyportal.customization.casewidget.howtooverridedataquery">
		<title xml:id="axonivyportal.customization.casewidget.howtooverridedataquery.title">How to override case widget's data query</title>
		<para>
			Override the <code>BuildCaseJsonQuery</code> callable process of PortalKit and build your own query to effect the data of case widget.
		</para>
		<para>
			Apply the following steps in case you would like to provide data for case list after navigating to case list from your page:
			<itemizedlist>
				<listitem>
					<para>Use the <code>OpenPortalCases</code> callable process with the <code>CaseView</code> parameter. It is used to define which information are displayed in CaseWidget.</para>
				</listitem>
				<listitem>
					<para>Refer to CaseView, CaseSearchCriteria to build your CaseView</para>
				</listitem>
			</itemizedlist>
			<screen>
CaseLazyDataModel dataModel = new CaseLazyDataModel();
dataModel.getCriteria().setCustomizedCaseQuery(YOUR_CASE_QUERY); // Set your CaseQuery
dataModel.getCriteria().setAdminQuery(true); // Use this code line if you would like to display the cases for all users
out.caseView = CaseView.create().dataModel(dataModel).withTitle("My Cases").buildNewView();
			</screen>
		</para>
	</sect2>
</sect1>
