<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
	xml:id="axonivyportal.components.additionalcomponent">
	<title>Additional Components</title>
	<sect2 xml:id="axonivyportal.components.additionalcomponent.processhistory">
		<title>Process history</title>
		<sect3 xml:id="axonivyportal.components.additionalcomponent.processhistory.introduction">
			<title>Introduction</title>
			<para>
				This component is a lazy loading list which displays all business cases of a business entity in your
				application. You
				can
				include this
				component
				everywhere:
			</para>
			<para>
				In a page
			</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/AdditionalComponent/processHistoryExample.png" />
				</imageobject>
			</mediaobject>
			<para>
				In a dialog
			</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/AdditionalComponent/processHistoryDialogExample.png" />
				</imageobject>
			</mediaobject>
		</sect3>
		<sect3 xml:id="axonivyportal.components.additionalcomponent.processhistory.howtouse">
			<title>How to use</title>
			<para>
				First you need to link the cases to the business entity. Call the subprocess
				<code>SetBusinessEntityId</code>
				in the process which need to be linked
				and input an identifier unique to your business entity. The subprocess will
				set the id to the additional property "CASE_BUSINESS_ENTITY_PROPERTY" of the business case.
			</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/AdditionalComponent/setBusinessEntityIdSubProcess.png" />
				</imageobject>
			</mediaobject>
			<para>
				Include the process history component into your page:
			</para>
			<para>
				<code>&lt;ic:ch.ivy.addon.portal.component.ProcessHistory businessEntityId="resourceA247" &gt;</code>
			</para>
			<para>
				The value of the attribute
				<code>businessEntityId</code>
				must match the id input into the subprocess in the first step.
			</para>
			<para>
				By default the component will load 20 cases at a
				time. You can change this by setting the attribute
				<code>chunkSize</code>
				to the number you want
				. You should use this attribute alongside with the attribute
				<code>scrollHeight</code>
				to configure the scroll bar of the list.
			</para>
			<note>
				If you use this component in a dialog, you must run this script
				<code>processHistory.setup();</code>
				when the dialog is shown. For example:
				<para>
					<code>
						&lt;p:dialog widgetVar="process-history-dialog" id="process-history-dialog" width="800" height="500"
						header="Process history of Resource A247" onShow="processHistory.setup();"&gt;</code>
				</para>
				<para>
					<code>&lt;ic:ch.ivy.addon.portal.component.ProcessHistory businessEntityId="resourceA247"
						chunkSize="6"
						scrollHeight="400" /&gt;</code>
				</para>
				<para>
					<code>&lt;/p:dialog></code>
				</para>
			</note>
			<important>
				If your process has a Trigger component or sends a signal to start another process with the option "Attach to
				Business
				Case that triggered this process" selected, the current case of the process will become a
				technical case and
				will not be loaded into
				the process history list. In this case
				You
				need to call the
				<code>SetBusinessEntityId</code>
				subprocess
				after the first Trigger or signal sending step.
			</important>
		</sect3>
	</sect2>
	<sect2 xml:id="axonivyportal.components.additionalcomponent.processchain">
		<title>Process Chain</title>
		<sect3 xml:id="axonivyportal.components.additionalcomponent.processchain.introduction">
			<title>Introduction</title>
			<para>
				Process Chain component of Portal provides features for users to know status of all steps in a process: the step's working, these steps are done, these steps is not done.
				These features are:
			</para>
			<orderedlist>
				<listitem>
					<para>
						Support to display all working steps or display only helpful steps as begin, last, current, previous current, next current steps.
					</para>
				</listitem>
				<listitem>
					<para>
						Support to change the shape of process chain: circle or line.
					</para>
				</listitem>
				<listitem>
					<para>
						Support to change direction of process chain: horizontal or vertical.
					</para>
				</listitem>
			</orderedlist>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/AdditionalComponent/processChain.png" />
				</imageobject>
			</mediaobject>
		</sect3>
		<sect3 xml:id="axonivyportal.components.additionalcomponent.processchain.howtouse">
			<title>How to use</title>
			<para>
				Process Chain component can be integrated in any widget by including this component into a page.
				In order to use this component in a page, include this component to this page with following code:
			</para>
			<para>
				<code>&lt;ic:ch.ivy.addon.portalkit.singleapp.process.ProcessChain id="process-chain-circle-horizontal" </code>
			</para>
			<para>
				<code>componentId="component-circle-horizontal" shape="CIRCLE" direction="HORIZONTAL"</code>
			</para>
			<para>
				<code>isShowAllSteps="FALSE" actualStepIndex="#{data.actualCurrentIndex}" steps="#{data.steps}" /&gt;</code>
			</para>
			<orderedlist>
				<listitem>
					<para>
						Must to set value for <code>actualStepIndex</code> parameter. This is current step index.
					</para>
				</listitem>
				<listitem>
					<para>
						Must to set value for <code>steps</code> parameter. This is list of working steps.
					</para>
				</listitem>
				<listitem>
					<para>
						Can change <code>shape</code> parameter to <code>CIRCLE</code> or <code>LINE</code> based on the requirement. Default value of this is <code>CIRCLE</code>.
					</para>
				</listitem>
				<listitem>
					<para>
						Can change <code>direction</code> parameter to <code>HORIZONTAL</code> or <code>VERTICAL</code> based on the requirement. Default value of this is <code>HORIZONTAL</code>.
					</para>
				</listitem>
				<listitem>
					<para>
						Can change <code>isShowAllSteps</code> parameter to <code>TRUE</code> or <code>FALSE</code> based on the requirement. Default value of this is <code>FALSE</code>.
					</para>
				</listitem>
			</orderedlist>
		</sect3>
	</sect2>
	<sect2 xml:id="axonivyportal.components.additionalcomponent.globalgrowl">
	<title>Global growl</title>
	<sect3 xml:id="axonivyportal.components.additionalcomponent.globalgrowl.introduction">
		<title>Introduction</title>
		<para>
			This component is a global growl introduced in BasicTemplate, you can use it to display your messages in Portal.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/AdditionalComponent/globalGrowl.png" />
			</imageobject>
		</mediaobject>
	</sect3>
	<sect3 xml:id="axonivyportal.components.additionalcomponent.globalgrowl.growlafterfinishtask">
		<title>Display growl after finishing a task</title>
		<para>
			To make growl message appears as default after a task is finished, administrator could set the <code>DISPLAY_MESSAGE_AFTER_FINISH_TASK</code> Portal variable to true.
		</para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/AdditionalComponent/exampleGlobalGrowlAfterFinishTask.png" />
            </imageobject>
        </mediaobject>
	</sect3>
    <sect3 xml:id="axonivyportal.components.additionalcomponent.globalgrowl.growlaftercanceltask">
        <title>Display growl after leaving a task</title>
        <para>
            If <code>DISPLAY_MESSAGE_AFTER_FINISH_TASK</code> Portal variable is true, growl message will be displayed after a task is left.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/AdditionalComponent/exampleGlobalGrowlAfterCancelTask.png" />
            </imageobject>
        </mediaobject>
    </sect3>
    <sect3 xml:id="axonivyportal.components.additionalcomponent.globalgrowl.growlcustomiztion">
        <title>Customization global growl message</title>
        <para>
            After that, for each task, you can turn it off or override it. Firstly, when you submit form to interact task, you need to put
            the
            <code>overridePortalGrowl</code>
            key to flash object with any value
        </para>
		<screen>
		Flash flash = FacesContext.getCurrentInstance().getExternalContext().getFlash();
		flash.put("overridePortalGrowl", true);
		flash.setRedirect(true);
		</screen>
		        <para>
		            It's enough if you want to turn it off. To override the message, add
		            <code>facesMessage</code>
		            to this component
		        </para>
		<screen>
		import javax.faces.context.Flash;
		import javax.faces.context.FacesContext;
		import javax.faces.application.FacesMessage;
		
		FacesMessage message = new FacesMessage("Task is done successfully");
		FacesContext.getCurrentInstance().addMessage("portal-global-growl-message", message);
		
		Flash flash = FacesContext.getCurrentInstance().getExternalContext().getFlash();
		flash.put("overridePortalGrowl", true);
		flash.setRedirect(true);
		flash.setKeepMessages(true);
		</screen>
		<para>
		Please refer to GlobalGrowl dialog in PortalExamples project for more details.
		</para>
    </sect3>
</sect2>
</sect1>