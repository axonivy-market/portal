<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:ic="http://ivyteam.ch/jsf/component" xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions" xmlns:cc="http://xmlns.jcp.org/jsf/composite"
  xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">
<cc:interface componentType="IvyComponent">
  <cc:attribute name="value" required="true" default="fa-play"
    shortDescription="Value expression to bind selected Icon on" />
  <cc:attribute name="tabindex" required="false" default="1" />
  <cc:attribute name="isReadOnly" default="false" />
  <cc:attribute name="hideIconArray" default="false"/>
</cc:interface>
<cc:implementation>
  <c:set var="tabindex" value="#{cc.attrs.tabindex}"/>
  <c:set var="readOnly" value="#{empty cc.attrs.isReadOnly ? false : cc.attrs.isReadOnly}"/>
  <c:set var="hideIconArray" value="#{empty cc.attrs.hideIconArray ? false : cc.attrs.hideIconArray}"/>
  <f:event listener="#{iconSelectionBean.init(cc.attrs.value)}" type="preRenderComponent" />
  <p:remoteCommand rendered="#{!hideIconArray}" oncomplete="loadIconsFirstTime('#{hideIconArray}','#{cc.clientId}', '#{cc.attrs.value}');" autoRun="true" global="false" immediate="true" partialSubmit="true"/>

  <h:panelGroup id="awesome-icon-selection" styleClass="awesome-icon-selection-panel">
    <h:panelGroup rendered="#{!hideIconArray}" id="menu-icon-container" styleClass="menu-icon-container" layout="block">
      <h:panelGroup id="custom-array-icon" styleClass="custom-array-icon" layout="block"/>
      <p:commandLink id="change-icon-link" styleClass="select-awesome-icon-button" tabindex="#{tabindex}"
        process="@this"
        onclick="PF('#{cc.clientId}-select-icon-dialog').show();" oncomplete="loadStreamlineIcon('#{cc.clientId}');"
        rendered="#{!readOnly}">
          <span class="si si-add-circle si-lg" />
        </p:commandLink>
    </h:panelGroup>
    <h:panelGroup rendered="#{hideIconArray}">
      <p:commandLink id="icon-link" tabindex="#{tabindex}"
        styleClass="select-icon-link"
        process="@this" rendered="#{!readOnly}"
        onclick="PF('#{cc.clientId}-select-icon-dialog').show();"
        oncomplete="loadStreamlineIcon('#{cc.clientId}');">
        <h:outputText id="selected-icon-display" styleClass="#{iconSelectionBean.iconPattern} #{cc.attrs.value} u-vertical-align-center" />
      </p:commandLink>
      <h:panelGroup rendered="#{readOnly}" layout="block" styleClass="select-awesome-icon-button">
        <h:panelGroup id="current-icon-display" styleClass="#{iconSelectionBean.iconPattern} #{cc.attrs.value}" />
        <p:spacer width="7px" />
      </h:panelGroup>
      <p:tooltip for="icon-link" value="#{ivy.cms.co('/Dialogs/ch/ivy/addon/portalkit/component/IconSelection/IconLinkTooltip')}"
        trackMouse="true"/>
    </h:panelGroup>

    <p:inputText type="hidden" id="selected-icon-hidden-value" value="#{cc.attrs.value}" />
  </h:panelGroup>
  
  <p:dialog id="select-icon-dialog" widgetVar="#{cc.clientId}-select-icon-dialog" styleClass="select-icon-dialog"
    width="52%" modal="true" appendTo="@(body)"
    header="#{ivy.cms.co('/ch.ivy.addon.portalkit.ui.jsf/iconselection/iconSelectionDialogHeader')}" dynamic="true"
    resizable="false" fitViewport="true" responsive="true">
    <div class="search-icon-name-container">
      <p:inputText id="search-icon-name-field" onkeyup="searchIconByName(this)" 
        placeholder="#{ivy.cms.co('/ch.ivy.addon.portalkit.ui.jsf/iconselection/seachIconByNamePlaceHolder')}"
        styleClass="search-icon-input Fright" />
    </div>
    <h:form id="icons-selection-form">
      <p:fieldset legend="Streamline" id="streamline-icon">
        <h:panelGroup layout="block" id="icons" />
      </p:fieldset>
      <p:fieldset legend="Awesome" id="awesome-icon" styleClass="MarTop20">
        <ui:repeat var="icon" value="#{masterDataBean.awesomeIcons}">
          <h:link id="awesome-icon" styleClass="icon-selection-dialog-selecting-icon"
            onclick="updateSelectedIconDisplay('#{icon.iconCode}', 'awesome', '#{cc.clientId}'); createAwesomeTag('#{icon.iconCode}', '#{cc.clientId}');PF('#{cc.clientId}-select-icon-dialog').hide();return false;">
            <span class="fa #{icon.iconCode} fa-lg" />
          </h:link>
          <p:tooltip for="awesome-icon" value="#{icon.iconCode}" trackMouse="true" hideEvent="mouseleave click" />
        </ui:repeat>
      </p:fieldset>
    </h:form>
  </p:dialog>
  
  <script>
    function updateSelectedIconDisplay(iconCode, type, clientId) {
      var iconDisplayJQ = $(PrimeFaces.escapeClientId(clientId + ":current-icon-display"));
      updateIconDisplay(iconDisplayJQ, iconCode, type);
      var iconDisplayForLink = $(PrimeFaces.escapeClientId(clientId + ":selected-icon-display"));
      updateIconDisplay(iconDisplayForLink, iconCode, type);

      var iconHiddenValueJQ = $(PrimeFaces.escapeClientId(clientId + ":selected-icon-hidden-value"));
      iconHiddenValueJQ.val(iconCode);
    }
    
    function updateIconDisplay(iconDisplayJQ, iconCode, type) {
      if (iconDisplayJQ === undefined || iconDisplayJQ.length == 0) {
        return;
      }
      iconDisplayJQ.removeClass();
      iconDisplayJQ.toggleClass(type === "awesome" ? "fa fa-lg" : "si si-lg");
      iconDisplayJQ.toggleClass("u-vertical-align-center");
      iconDisplayJQ.addClass(iconCode);
    }

    function createAwesomeTag(iconCode, clientId) {
        var container = document.getElementById(clientId + ":custom-array-icon");
        if(container) {
          $(container).find('a').addClass('opacity-40');
          var iconImage = document.createElement("span");
          iconImage.className = "fa " + iconCode + " fa-lg";

          var iconAnchor = document.createElement("a");
          iconAnchor.className = "icon-selection-dialog-selecting-icon";
          iconAnchor.appendChild(iconImage);
          iconAnchor.title = iconCode;
          iconAnchor.onclick = function() {
            updateSelectedIconDisplay(iconCode, "awesome", clientId);
            $(container).find('a').addClass('opacity-40');
            $(this).removeClass('opacity-40');
          };
          $(container).prepend(iconAnchor);
        }
    }

    function reoderSelectedIconOnTop(icons, selectedIconCode) {
      icons.forEach(function(icon,i){
        var iconCode = icon.selectorText.substring(1, icon.selectorText.length - 8);
        if(iconCode === selectedIconCode){
          icons.splice(i, 1);
          icons.unshift(icon);
        }
      });
    }
    
    function loadStreamlineIcon(clientId) {
      var iconsStylesheet = Object.values(document.styleSheets).filter(sheet => sheet.href?.includes("StreamlineIcons.css"))[0];
      var icons = Object.values(iconsStylesheet.rules).filter(rule => rule.selectorText?.startsWith(".si-"));
      icons.sort((a, b) => (a.selectorText > b.selectorText) ? 1 : -1);
    
      var selectionIconDialogId = clientId + "-select-icon-dialog";
      var container = document.getElementById(clientId + ":icons-selection-form:icons");
      container.innerHTML = "";
      icons.forEach(icon => {
        var iconCode = icon.selectorText.substring(1, icon.selectorText.length - 8);
        var iconImage = document.createElement("i");
        iconImage.className = "si " + iconCode + " si-lg";

        var iconAnchor = document.createElement("a");
        iconAnchor.className = "icon-selection-dialog-selecting-icon";
        iconAnchor.appendChild(iconImage);
        iconAnchor.title = iconCode;
        iconAnchor.onclick = function() {
          updateSelectedIconDisplay(iconCode, "streamline", clientId);
          PF(selectionIconDialogId).hide();
          reloadStreamlineIcon(clientId, iconCode);
          return false;
        };
        
        container.appendChild(iconAnchor);
      });
      
      var searchField = document.getElementById(clientId + ":search-icon-name-field");
      searchIconByName(searchField);
      PF(selectionIconDialogId).initPosition();
    }

    function reloadStreamlineIcon(clientId, currentIconCode) {
      var container = document.getElementById(clientId + ":custom-array-icon");
      if(container) {
        var iconsStylesheet = Object.values(document.styleSheets).filter(sheet => sheet.href?.includes("StreamlineIcons.css"))[0];
        var icons = Object.values(iconsStylesheet.rules).filter(rule => rule.selectorText?.startsWith(".si-"));
        reoderSelectedIconOnTop(icons, currentIconCode);
        container.innerHTML = "";
        icons.forEach((icon, index) => {
          var iconCode = icon.selectorText.substring(1, icon.selectorText.length - 8);
          var iconImage = document.createElement("i");
          iconImage.className = "si " + iconCode + " si-lg";
          
          var iconAnchor = document.createElement("a");
          if(currentIconCode == iconCode) {
            iconAnchor.className = "icon-selection-dialog-selecting-icon";
          } else {
            iconAnchor.className = "icon-selection-dialog-selecting-icon opacity-40";
          }

          iconAnchor.appendChild(iconImage);
          iconAnchor.title = iconCode;

          iconAnchor.onclick = function() {
            updateSelectedIconDisplay(iconCode, "streamline", clientId);
            $(container).find('a').addClass('opacity-40');
            $(this).removeClass('opacity-40');
            return false;
          };
          container.appendChild(iconAnchor);
        });
      }
    };

    function loadIconsFirstTime(hideIconArray, clientId, currentIcon) {
      if(hideIconArray == true) {
        return;
      }
      reloadStreamlineIcon(clientId, currentIcon);
      if(currentIcon.includes('fa-')) {
        createAwesomeTag(currentIcon, clientId);
      }
    }

  </script>
</cc:implementation>
</html>