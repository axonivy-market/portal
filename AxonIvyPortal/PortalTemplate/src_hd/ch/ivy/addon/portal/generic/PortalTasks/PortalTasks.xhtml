<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:ic="http://ivyteam.ch/jsf/component" xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions" xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">
<h:body>
  <ui:composition template="/layouts/PortalTasksTemplate.xhtml">
    <ui:param name="menuState" value="#{data.menuState}" />
    <ui:param name="filterGroupId" value="#{ivy.request.processModel.id}" />
    <ui:param name="isNotRequiredLogin" value="false" />
    <!--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!BELOW IS SAMPLE CODE FOR CUSTOMIZATION, WRAPPED IN <ui:remove> TAG. TO ACTIVATE THE CUSTOMIZATION, REMOVE <ui:remove> TAG!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->
    <ui:remove>
      <ui:param name="useOverrideListHeader" value="true" />
      <ui:param name="useOverrideHeader" value="true" />
      <ui:param name="useOverrideBody" value="true" />
      <ui:param name="useOverrideFilter" value="true" />

      <ui:define name="taskListHeader">
        <!-- use the TaskListHeader component to keep default columns, and add a new one with TaskColumnHeader. -->
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskListHeader dataModel="#{taskView.dataModel}" />
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskColumnHeader dataModel="#{taskView.dataModel}"
          componentId="task-custom" sortField="customVarcharField5" value="CustomVarcharField5" />
      </ui:define>

      <ui:define name="taskHeader">
        <!-- Flexbox is applied, so please set your column's width by flex style. The TaskName column takes the remaining width. -->
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskPriority
          priority="#{task.priority}" dataModel="#{taskView.dataModel}" />
        <div class="task-start-info">
          <ic:ch.ivy.addon.portalkit.component.task.column.TaskName task="#{task}" dataModel="#{taskView.dataModel}"
            isSelected="#{taskView.taskId eq task.getId()}" />
        </div>
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskResponsible dataModel="#{taskView.dataModel}"
          userName="#{task.getActivatorName()}" fullName="#{task.getActivator().getDisplayName()}" styleClass="activatior-column #{taskView.dataModel.isAutoHideColumns()? 'hidden-sm':''}" />
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskId value="#{task.getId()}" dataModel="#{taskView.dataModel}" />
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskDate rendered="#{taskView.dataModel.isSelectedColumn('CREATION_TIME')}"
          componentId="creation-time" value="#{task.startTimestamp}" styleClass="#{taskView.dataModel.isAutoHideColumns()?'js-create-cell':''}" />
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskDate rendered="#{taskView.dataModel.isSelectedColumn('EXPIRY_TIME')}"
          componentId="expiry-time" value="#{task.expiryTimestamp}" styleClass="#{taskView.dataModel.isAutoHideColumns()?'js-expiry-cell':''}" />
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskState dataModel="#{taskView.dataModel}"
          state="#{task.state}" />

        <!-- New field -->
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskCustomField id="customer-name-component" componentId="customer-name" column="customVarCharField5"
          dataModel="#{taskView.dataModel}" labelValue="#{task.customFields().stringField('CustomVarCharField5').getOrNull()}" />
        <ic:ch.ivy.addon.portalkit.component.task.column.TaskCustomField id="customer-type-component" componentId="customer-type" column="customVarCharField1"
          dataModel="#{taskView.dataModel}" labelValue="#{task.customFields().stringField('CustomVarCharField1').getOrNull()}" />
      </ui:define>

      <ui:define name="taskBody">
        <!-- These are the default components, reuse them if you want. -->
        <ic:ch.ivy.addon.portalkit.component.TaskItemDescription id="task-description" task="#{task}"
          descriptionComponentToUpdate="#{p:component('task-description')}" />
        <ic:ch.ivy.addon.portalkit.component.TaskItemGeneralInfo id="task-general-info" task="#{task}"
          priorityComponentToUpdate="#{p:component('task-priority')}"
          componentToUpdate="#{p:component('task-details-notes')}" />
        <ic:ch.ivy.addon.portalkit.component.TaskItemDocuments id="task-documents" task="#{task}" />
        <ic:ch.ivy.addon.portalkit.component.TaskItemNotes id="task-notes" task="#{task}" />

        <!-- Replace the responsiveness support by your own one. -->
        <ic:ch.ivy.addon.portalkit.component.ResponsivenessHandleContainer styleClass="hidden-lg">
          <ic:ch.ivy.addon.portalkit.component.ResponsivenessHandleButton
            icon="fa fa-file js-note-column-responsive-button" displayedSelectors="['#task-note']"
            hiddenSelectorsInMediumScreen="['.task-details .replaced']"
            hiddenSelectorsInSmallScreen="['.task-details .replaced']" />
          <h:outputScript library="js" name="task-detail-default-responsiveness.js" />
        </ic:ch.ivy.addon.portalkit.component.ResponsivenessHandleContainer>
      </ui:define>

      <ui:define name="taskFilter">
        <c:set var="filterContainer" value="#{taskView.dataModel.filterContainer}" />

        <!-- There are some filter components in the package: ch.ivy.addon.portalkit.component.task.filter. For example: DefaultTaskFilters -->
        <ic:ch.ivy.addon.portalkit.component.task.filter.DefaultTaskFilters dataModel="#{taskView.dataModel}" />

        <ic:ch.ivy.addon.portalkit.component.task.filter.AdvancedFilter id="customer-name-filter"
          dataModel="#{taskView.dataModel}" taskFilter="#{filterContainer.customerNameFilter}">
          <p:inputText id="customVarChar5" value="#{filterContainer.customerNameFilter.customerName}" />
        </ic:ch.ivy.addon.portalkit.component.task.filter.AdvancedFilter>

        <!-- If you use p:ajax to update task widget, set displayFooterButtons to false and set the update attribute as below:
          
        <ic:ch.ivy.addon.portalkit.component.AdvancedFilter id="<FILTER_ID>" ...>
            ...
              <p:ajax update="@([id$='<FILTER_ID>:filter-open-form']) @form #{p:component('task-view-container')}"
            global="false" oncomplete="taskWidget.setupScrollbar(); taskWidget.setupHeader()" />
            ...
          </ic:ch.ivy.addon.portalkit.component.AdvancedFilter>
        -->
        <ic:ch.ivy.addon.portalkit.component.task.filter.AdvancedFilter id="customer-type-filter"
          dataModel="#{taskView.dataModel}" displayFooterButtons="false"
          taskFilter="#{filterContainer.customerTypeFilter}">
          <p:selectOneRadio layout="pageDirection" value="#{filterContainer.customerTypeFilter.selectedCustomerType}">
            <p:ajax
              update="@([id$='customer-type-filter:filter-open-form']) @form #{p:component('task-view-container')}"
              global="false" oncomplete="taskWidget.setupScrollbar(); taskWidget.setupHeader()" />
            <f:selectItems var="type" value="#{filterContainer.customerTypeFilter.customerTypes}" itemLabel="#{type}"
              itemValue="#{type}" />
          </p:selectOneRadio>
        </ic:ch.ivy.addon.portalkit.component.task.filter.AdvancedFilter>
      </ui:define>

    </ui:remove>
  </ui:composition>
</h:body>
</html>